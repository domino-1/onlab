[topCellInitializer{}(LblinitGeneratedTopCell{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]

module BASIC-K
    sort SortK{} []
    sort SortKItem{} []
endmodule
[]
module KSEQ
    import BASIC-K []
    symbol kseq{}(SortKItem{}, SortK{}) : SortK{} [constructor{}(), functional{}(), injective{}()]
    symbol dotk{}() : SortK{} [constructor{}(), functional{}(), injective{}()]
    symbol append{}(SortK{}, SortK{}) : SortK{} [function{}(), functional{}()]
    axiom {R} \implies{R}(
        \and{R}(
            \top{R}(),
            \and{R}(
                \in{SortK{}, R}(X0:SortK{}, dotk{}()),
            \and{R}(
                \in{SortK{}, R}(X1:SortK{}, TAIL:SortK{}),
                \top{R}()
            ))
        ),
        \equals{SortK{}, R}(
            append{}(X0:SortK{}, X1:SortK{}),
            \and{SortK{}}(
                TAIL:SortK{},
                \top{SortK{}}()
            )
        )
    ) []
    axiom {R} \implies{R}(
        \and{R}(
            \top{R}(),
            \and{R}(
                \in{SortK{}, R}(X0:SortK{}, kseq{}(K:SortKItem{}, KS:SortK{})),
            \and{R}(
                \in{SortK{}, R}(X1:SortK{}, TAIL:SortK{}),
                \top{R}()
            ))
        ),
        \equals{SortK{}, R}(
            append{}(X0:SortK{}, X1:SortK{}),
            \and{SortK{}}(
                kseq{}(K:SortKItem{}, append{}(KS:SortK{}, TAIL:SortK{})),
                \top{SortK{}}()
            )
        )
    ) []
endmodule
[]
module INJ
    symbol inj{From, To}(From) : To [sortInjection{}()]
    axiom {S1, S2, S3, R} \equals{S3, R}(inj{S2, S3}(inj{S1, S2}(T:S1)), inj{S1, S3}(T:S1)) [simplification{}()]
endmodule
[]
module K
    import KSEQ []
    import INJ []
    alias weakExistsFinally{A}(A) : A where weakExistsFinally{A}(@X:A) := @X:A []
    alias weakAlwaysFinally{A}(A) : A where weakAlwaysFinally{A}(@X:A) := @X:A []
    alias allPathGlobally{A}(A) : A where allPathGlobally{A}(@X:A) := @X:A []
endmodule
[]

module XSTS

// imports
  import K []

// sorts
  sort SortTCellFragment{} []
  sort SortTransition{} []
  sort SortKCellOpt{} []
  sort SortStateCellFragment{} []
  sort SortChoiceOrBlocks{} []
  sort SortProgram{} []
  sort SortKCell{} []
  sort SortHavoc{} []
  sort SortKConfigVar{} [hasDomainValues{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(40,3,40,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/kast.md)"), token{}()]
  hooked-sort SortSet{} [concat{}(Lbl'Unds'Set'Unds'{}()), element{}(LblSetItem{}()), hook{}("SET.Set"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(700,3,700,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), unit{}(Lbl'Stop'Set{}())]
  sort SortAssumption{} []
  sort SortOperation{} []
  sort SortTransitionsCell{} []
  sort SortTransitionsCellOpt{} []
  sort SortVariableDeclaration{} []
  sort SortChoiceOrBlock{} []
  sort SortGeneratedTopCellFragment{} []
  hooked-sort SortList{} [concat{}(Lbl'Unds'List'Unds'{}()), element{}(LblListItem{}()), hook{}("LIST.List"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(913,3,913,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), unit{}(Lbl'Stop'List{}()), update{}(LblList'Coln'set{}())]
  sort SortVariablesCell{} []
  sort SortGeneratedTopCell{} []
  sort SortStateCell{} []
  sort SortGeneratedCounterCell{} []
  sort SortTCellOpt{} []
  sort SortSequence{} []
  hooked-sort SortMap{} [concat{}(Lbl'Unds'Map'Unds'{}()), element{}(Lbl'UndsPipe'-'-GT-Unds'{}()), hook{}("MAP.Map"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(218,3,218,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), unit{}(Lbl'Stop'Map{}())]
  sort SortId{} [hasDomainValues{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2255,3,2255,20)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), token{}()]
  sort SortGeneratedCounterCellOpt{} []
  sort SortVariablesCellOpt{} []
  sort SortChoice{} []
  sort SortAssignment{} []
  sort SortLiteral{} []
  hooked-sort SortInt{} [hasDomainValues{}(), hook{}("INT.Int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1198,3,1198,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]
  sort SortStateCellOpt{} []
  sort SortLine{} []
  sort SortTCell{} []
  hooked-sort SortBool{} [hasDomainValues{}(), hook{}("BOOL.Bool"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1077,3,1077,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]

// symbols
  hooked-symbol Lbl'Stop'List{}() : SortList{} [function{}(), functional{}(), hook{}("LIST.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(937,19,937,113)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), smtlib{}("smt_seq_nil"), symbol'Kywd'{}(".List"), total{}()]
  symbol Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks'QuotRBraUnds'ChoiceOrBlocks{}() : SortChoiceOrBlocks{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(21,31,21,54)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)"), symbol'Kywd'{}(".List{\"___XSTS-SYNTAX\"}")]
  symbol Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program'QuotRBraUnds'Program{}() : SortProgram{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(28,24,28,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)"), symbol'Kywd'{}(".List{\"___XSTS-SYNTAX\"}")]
  symbol Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence'QuotRBraUnds'Sequence{}() : SortSequence{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(25,25,25,44)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)"), symbol'Kywd'{}(".List{\"___XSTS-SYNTAX\"}")]
  hooked-symbol Lbl'Stop'Map{}() : SortMap{} [function{}(), functional{}(), hook{}("MAP.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(248,18,248,96)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(".Map"), total{}()]
  hooked-symbol Lbl'Stop'Set{}() : SortSet{} [function{}(), functional{}(), hook{}("SET.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(729,18,729,90)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(".Set"), total{}()]
  symbol Lbl'-LT-'T'-GT-'{}(SortKCell{}, SortStateCell{}) : SortTCell{} [cell{}(), constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(35,19,41,23)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lbl'-LT-'T'-GT-'-fragment{}(SortKCellOpt{}, SortStateCellOpt{}) : SortTCellFragment{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'generatedCounter'-GT-'{}(SortInt{}) : SortGeneratedCounterCell{} [cell{}(), constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'{}(SortTCell{}, SortGeneratedCounterCell{}) : SortGeneratedTopCell{} [cell{}(), constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'-fragment{}(SortTCellOpt{}, SortGeneratedCounterCellOpt{}) : SortGeneratedTopCellFragment{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'k'-GT-'{}(SortK{}) : SortKCell{} [cell{}(), constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(36,21,36,42)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lbl'-LT-'state'-GT-'{}(SortVariablesCell{}, SortTransitionsCell{}) : SortStateCell{} [cell{}(), constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(37,21,40,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lbl'-LT-'state'-GT-'-fragment{}(SortVariablesCellOpt{}, SortTransitionsCellOpt{}) : SortStateCellFragment{} [constructor{}(), functional{}(), injective{}()]
  symbol Lbl'-LT-'transitions'-GT-'{}(SortList{}) : SortTransitionsCell{} [cell{}(), constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(39,23,39,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lbl'-LT-'variables'-GT-'{}(SortMap{}) : SortVariablesCell{} [cell{}(), constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,23,38,52)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  hooked-symbol LblList'Coln'get{}(SortList{}, SortInt{}) : SortKItem{} [function{}(), hook{}("LIST.get"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(965,20,965,91)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("List:get")]
  hooked-symbol LblList'Coln'range{}(SortList{}, SortInt{}, SortInt{}) : SortList{} [function{}(), hook{}("LIST.range"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1012,19,1012,112)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("List:range")]
  hooked-symbol LblList'Coln'set{}(SortList{}, SortInt{}, SortKItem{}) : SortList{} [function{}(), hook{}("LIST.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(974,19,974,108)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("List:set")]
  hooked-symbol LblListItem{}(SortKItem{}) : SortList{} [function{}(), functional{}(), hook{}("LIST.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(945,19,945,124)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), smtlib{}("smt_seq_elem"), symbol'Kywd'{}("ListItem"), total{}()]
  hooked-symbol LblMap'Coln'choice{}(SortMap{}) : SortKItem{} [function{}(), hook{}("MAP.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(393,20,393,101)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("Map:choice")]
  hooked-symbol LblMap'Coln'lookup{}(SortMap{}, SortKItem{}) : SortKItem{} [function{}(), hook{}("MAP.lookup"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(271,20,271,105)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("Map:lookup")]
  hooked-symbol LblMap'Coln'lookupOrDefault{}(SortMap{}, SortKItem{}, SortKItem{}) : SortKItem{} [function{}(), functional{}(), hook{}("MAP.lookupOrDefault"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(281,20,281,134)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("Map:lookupOrDefault"), total{}()]
  hooked-symbol LblMap'Coln'update{}(SortMap{}, SortKItem{}, SortKItem{}) : SortMap{} [function{}(), functional{}(), hook{}("MAP.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(290,18,290,132)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("Map:update"), total{}()]
  hooked-symbol LblSet'Coln'choice{}(SortSet{}) : SortKItem{} [function{}(), hook{}("SET.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(804,20,804,95)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("Set:choice")]
  hooked-symbol LblSet'Coln'difference{}(SortSet{}, SortSet{}) : SortSet{} [function{}(), functional{}(), hook{}("SET.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(769,18,769,106)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("Set:difference"), total{}()]
  hooked-symbol LblSet'Coln'in{}(SortKItem{}, SortSet{}) : SortBool{} [function{}(), functional{}(), hook{}("SET.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(777,19,777,94)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("Set:in"), total{}()]
  hooked-symbol LblSetItem{}(SortKItem{}) : SortSet{} [function{}(), functional{}(), hook{}("SET.element"), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(737,18,737,111)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("SetItem"), total{}()]
  hooked-symbol Lbl'Unds'-Map'UndsUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [function{}(), functional{}(), hook{}("MAP.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(311,18,311,88)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  symbol Lbl'UndsColnEqlsUndsUnds'XSTS-SYNTAX'Unds'Assignment'Unds'Id'Unds'Literal{}(SortId{}, SortLiteral{}) : SortAssignment{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(10,27,10,42)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  hooked-symbol Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'Unds'Bool'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortBool{} [function{}(), functional{}(), hook{}("MAP.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(383,19,383,87)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'Unds'Bool'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortBool{} [function{}(), functional{}(), hook{}("SET.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(786,19,786,81)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  hooked-symbol Lbl'Unds'List'Unds'{}(SortList{}, SortList{}) : SortList{} [element{}(LblListItem{}()), function{}(), functional{}(), hook{}("LIST.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(929,19,929,198)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), smtlib{}("smt_seq_concat"), symbol'Kywd'{}("_List_"), total{}(), unit{}(Lbl'Stop'List{}()), update{}(LblList'Coln'set{}())]
  hooked-symbol Lbl'Unds'Map'Unds'{}(SortMap{}, SortMap{}) : SortMap{} [element{}(Lbl'UndsPipe'-'-GT-Unds'{}()), function{}(), hook{}("MAP.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(240,18,240,165)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("_Map_"), unit{}(Lbl'Stop'Map{}())]
  hooked-symbol Lbl'Unds'Set'Unds'{}(SortSet{}, SortSet{}) : SortSet{} [element{}(LblSetItem{}()), function{}(), hook{}("SET.concat"), idem{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(721,18,721,157)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("_Set_"), unit{}(Lbl'Stop'Set{}())]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(SortMap{}, SortKItem{}) : SortMap{} [function{}(), functional{}(), hook{}("MAP.remove"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(299,18,299,109)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("_[_<-undef]"), total{}()]
  symbol Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks{}(SortChoiceOrBlock{}, SortChoiceOrBlocks{}) : SortChoiceOrBlocks{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(21,31,21,54)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program{}(SortLine{}, SortProgram{}) : SortProgram{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(28,24,28,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence{}(SortOperation{}, SortSequence{}) : SortSequence{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(25,25,25,44)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  hooked-symbol Lbl'Unds'inList'Unds'{}(SortKItem{}, SortList{}) : SortBool{} [function{}(), functional{}(), hook{}("LIST.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1021,19,1021,97)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("_inList_"), total{}()]
  hooked-symbol Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(SortKItem{}, SortMap{}) : SortBool{} [function{}(), functional{}(), hook{}("MAP.in_keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(357,19,357,89)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  hooked-symbol Lbl'UndsPipe'-'-GT-Unds'{}(SortKItem{}, SortKItem{}) : SortMap{} [function{}(), functional{}(), hook{}("MAP.element"), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(257,18,257,119)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("_|->_"), total{}()]
  hooked-symbol Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [function{}(), functional{}(), hook{}("SET.union"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(748,18,748,92)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  symbol Lblassume'LParUndsRParUnds'XSTS-SYNTAX'Unds'Assumption'Unds'Literal{}(SortLiteral{}) : SortAssumption{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(12,27,12,48)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lblchoice'LBraUndsRBraUndsUnds'XSTS-SYNTAX'Unds'Choice'Unds'Sequence'Unds'ChoiceOrBlocks{}(SortSequence{}, SortChoiceOrBlocks{}) : SortChoice{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,23,19,61)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lblempty'Unds'XSTS-SYNTAX'Unds'Literal{}() : SortLiteral{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(6,37,6,44)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  hooked-symbol LblfillList'LParUndsCommUndsCommUndsCommUndsRParUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortInt{}, SortKItem{}) : SortList{} [function{}(), hook{}("LIST.fill"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1002,19,1002,100)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]
  symbol LblgetGeneratedCounterCell{}(SortGeneratedTopCell{}) : SortGeneratedCounterCell{} [function{}()]
  symbol Lblhavoc'LParUndsRParUnds'XSTS-SYNTAX'Unds'Havoc'Unds'Id{}(SortId{}) : SortHavoc{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,22,11,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol LblinitGeneratedCounterCell{}() : SortGeneratedCounterCell{} [function{}(), functional{}(), total{}()]
  symbol LblinitGeneratedTopCell{}(SortMap{}) : SortGeneratedTopCell{} [function{}()]
  symbol LblinitKCell{}(SortMap{}) : SortKCell{} [function{}()]
  symbol LblinitStateCell{}() : SortStateCell{} [function{}(), functional{}(), total{}()]
  symbol LblinitTCell{}(SortMap{}) : SortTCell{} [function{}()]
  symbol LblinitTransitionsCell{}() : SortTransitionsCell{} [function{}(), functional{}(), total{}()]
  symbol LblinitVariablesCell{}() : SortVariablesCell{} [function{}(), functional{}(), total{}()]
  hooked-symbol LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [function{}(), functional{}(), hook{}("SET.intersection"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(759,18,759,90)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  symbol LblisAssignment{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisAssumption{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisBool{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisChoice{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisChoiceOrBlock{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisChoiceOrBlocks{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisGeneratedCounterCell{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisGeneratedCounterCellOpt{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisGeneratedTopCell{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisGeneratedTopCellFragment{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisHavoc{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisId{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisInt{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisK{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisKCell{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisKCellOpt{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisKConfigVar{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisKItem{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisLine{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisList{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisLiteral{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisMap{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisOperation{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisProgram{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisSequence{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisSet{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisStateCell{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisStateCellFragment{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisStateCellOpt{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisTCell{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisTCellFragment{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisTCellOpt{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisTransition{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisTransitionsCell{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisTransitionsCellOpt{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisVariableDeclaration{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisVariablesCell{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  symbol LblisVariablesCellOpt{}(SortK{}) : SortBool{} [function{}(), functional{}(), total{}()]
  hooked-symbol Lblkeys'LParUndsRParUnds'MAP'Unds'Set'Unds'Map{}(SortMap{}) : SortSet{} [function{}(), functional{}(), hook{}("MAP.keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(341,18,341,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  hooked-symbol Lblkeys'Unds'list'LParUndsRParUnds'MAP'Unds'List'Unds'Map{}(SortMap{}) : SortList{} [function{}(), hook{}("MAP.keys_list"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(349,19,349,80)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]
  hooked-symbol LblmakeList'LParUndsCommUndsRParUnds'LIST'Unds'List'Unds'Int'Unds'KItem{}(SortInt{}, SortKItem{}) : SortList{} [function{}(), hook{}("LIST.make"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(983,19,983,82)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]
  symbol LblnoGeneratedCounterCell{}() : SortGeneratedCounterCellOpt{} [constructor{}(), functional{}(), injective{}()]
  symbol LblnoKCell{}() : SortKCellOpt{} [constructor{}(), functional{}(), injective{}()]
  symbol LblnoStateCell{}() : SortStateCellOpt{} [constructor{}(), functional{}(), injective{}()]
  symbol LblnoTCell{}() : SortTCellOpt{} [constructor{}(), functional{}(), injective{}()]
  symbol LblnoTransitionsCell{}() : SortTransitionsCellOpt{} [constructor{}(), functional{}(), injective{}()]
  symbol LblnoVariablesCell{}() : SortVariablesCellOpt{} [constructor{}(), functional{}(), injective{}()]
  symbol Lblor'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'ChoiceOrBlock'Unds'Sequence{}(SortSequence{}) : SortChoiceOrBlock{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(20,30,20,49)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lblproject'Coln'Assignment{}(SortK{}) : SortAssignment{} [function{}()]
  symbol Lblproject'Coln'Assumption{}(SortK{}) : SortAssumption{} [function{}()]
  symbol Lblproject'Coln'Bool{}(SortK{}) : SortBool{} [function{}()]
  symbol Lblproject'Coln'Choice{}(SortK{}) : SortChoice{} [function{}()]
  symbol Lblproject'Coln'ChoiceOrBlock{}(SortK{}) : SortChoiceOrBlock{} [function{}()]
  symbol Lblproject'Coln'ChoiceOrBlocks{}(SortK{}) : SortChoiceOrBlocks{} [function{}()]
  symbol Lblproject'Coln'GeneratedCounterCell{}(SortK{}) : SortGeneratedCounterCell{} [function{}()]
  symbol Lblproject'Coln'GeneratedCounterCellOpt{}(SortK{}) : SortGeneratedCounterCellOpt{} [function{}()]
  symbol Lblproject'Coln'GeneratedTopCell{}(SortK{}) : SortGeneratedTopCell{} [function{}()]
  symbol Lblproject'Coln'GeneratedTopCellFragment{}(SortK{}) : SortGeneratedTopCellFragment{} [function{}()]
  symbol Lblproject'Coln'Havoc{}(SortK{}) : SortHavoc{} [function{}()]
  symbol Lblproject'Coln'Id{}(SortK{}) : SortId{} [function{}()]
  symbol Lblproject'Coln'Int{}(SortK{}) : SortInt{} [function{}()]
  symbol Lblproject'Coln'K{}(SortK{}) : SortK{} [function{}()]
  symbol Lblproject'Coln'KCell{}(SortK{}) : SortKCell{} [function{}()]
  symbol Lblproject'Coln'KCellOpt{}(SortK{}) : SortKCellOpt{} [function{}()]
  symbol Lblproject'Coln'KItem{}(SortK{}) : SortKItem{} [function{}()]
  symbol Lblproject'Coln'Line{}(SortK{}) : SortLine{} [function{}()]
  symbol Lblproject'Coln'List{}(SortK{}) : SortList{} [function{}()]
  symbol Lblproject'Coln'Literal{}(SortK{}) : SortLiteral{} [function{}()]
  symbol Lblproject'Coln'Map{}(SortK{}) : SortMap{} [function{}()]
  symbol Lblproject'Coln'Operation{}(SortK{}) : SortOperation{} [function{}()]
  symbol Lblproject'Coln'Program{}(SortK{}) : SortProgram{} [function{}()]
  symbol Lblproject'Coln'Sequence{}(SortK{}) : SortSequence{} [function{}()]
  symbol Lblproject'Coln'Set{}(SortK{}) : SortSet{} [function{}()]
  symbol Lblproject'Coln'StateCell{}(SortK{}) : SortStateCell{} [function{}()]
  symbol Lblproject'Coln'StateCellFragment{}(SortK{}) : SortStateCellFragment{} [function{}()]
  symbol Lblproject'Coln'StateCellOpt{}(SortK{}) : SortStateCellOpt{} [function{}()]
  symbol Lblproject'Coln'TCell{}(SortK{}) : SortTCell{} [function{}()]
  symbol Lblproject'Coln'TCellFragment{}(SortK{}) : SortTCellFragment{} [function{}()]
  symbol Lblproject'Coln'TCellOpt{}(SortK{}) : SortTCellOpt{} [function{}()]
  symbol Lblproject'Coln'Transition{}(SortK{}) : SortTransition{} [function{}()]
  symbol Lblproject'Coln'TransitionsCell{}(SortK{}) : SortTransitionsCell{} [function{}()]
  symbol Lblproject'Coln'TransitionsCellOpt{}(SortK{}) : SortTransitionsCellOpt{} [function{}()]
  symbol Lblproject'Coln'VariableDeclaration{}(SortK{}) : SortVariableDeclaration{} [function{}()]
  symbol Lblproject'Coln'VariablesCell{}(SortK{}) : SortVariablesCell{} [function{}()]
  symbol Lblproject'Coln'VariablesCellOpt{}(SortK{}) : SortVariablesCellOpt{} [function{}()]
  hooked-symbol LblpushList{}(SortKItem{}, SortList{}) : SortList{} [function{}(), functional{}(), hook{}("LIST.push"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(953,19,953,99)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("pushList"), total{}()]
  hooked-symbol LblremoveAll'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Set{}(SortMap{}, SortSet{}) : SortMap{} [function{}(), functional{}(), hook{}("MAP.removeAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(333,18,333,87)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(SortSet{}) : SortInt{} [function{}(), functional{}(), hook{}("SET.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(794,18,794,76)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  hooked-symbol LblsizeList{}(SortList{}) : SortInt{} [function{}(), functional{}(), hook{}("LIST.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1029,18,1029,116)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), smtlib{}("smt_seq_len"), symbol'Kywd'{}("sizeList"), total{}()]
  hooked-symbol LblsizeMap{}(SortMap{}) : SortInt{} [function{}(), functional{}(), hook{}("MAP.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(373,18,373,99)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), symbol'Kywd'{}("sizeMap"), total{}()]
  symbol Lbltran'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'Transition'Unds'Sequence{}(SortSequence{}) : SortTransition{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(23,27,23,48)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  hooked-symbol LblupdateList'LParUndsCommUndsCommUndsRParUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'List{}(SortList{}, SortInt{}, SortList{}) : SortList{} [function{}(), hook{}("LIST.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(993,19,993,97)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]
  hooked-symbol LblupdateMap'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [function{}(), functional{}(), hook{}("MAP.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(324,18,324,87)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)"), total{}()]
  hooked-symbol Lblvalues'LParUndsRParUnds'MAP'Unds'List'Unds'Map{}(SortMap{}) : SortList{} [function{}(), hook{}("MAP.values"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(365,19,365,77)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]
  symbol Lblvar'UndsColn'boolean'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(SortId{}) : SortVariableDeclaration{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,36,8,58)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
  symbol Lblvar'UndsColn'integer'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(SortId{}) : SortVariableDeclaration{} [constructor{}(), functional{}(), injective{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(7,36,7,58)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]

// generated axioms
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortOperation{}, SortKItem{}} (From:SortOperation{}))) [subsort{SortOperation{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCellOpt{}, SortKItem{}} (From:SortTCellOpt{}))) [subsort{SortTCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCellOpt{}, SortKItem{}} (From:SortKCellOpt{}))) [subsort{SortKCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, inj{SortKCell{}, SortKCellOpt{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortTCellOpt{}, \equals{SortTCellOpt{}, R} (Val:SortTCellOpt{}, inj{SortTCell{}, SortTCellOpt{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortTCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortVariablesCellOpt{}, SortKItem{}} (From:SortVariablesCellOpt{}))) [subsort{SortVariablesCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMap{}, SortKItem{}} (From:SortMap{}))) [subsort{SortMap{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortAssumption{}, SortKItem{}} (From:SortAssumption{}))) [subsort{SortAssumption{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCell{}, SortKItem{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSet{}, SortKItem{}} (From:SortSet{}))) [subsort{SortSet{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortId{}, SortKItem{}} (From:SortId{}))) [subsort{SortId{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortChoiceOrBlock{}, SortKItem{}} (From:SortChoiceOrBlock{}))) [subsort{SortChoiceOrBlock{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTransition{}, SortKItem{}} (From:SortTransition{}))) [subsort{SortTransition{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStateCellOpt{}, SortKItem{}} (From:SortStateCellOpt{}))) [subsort{SortStateCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortVariablesCell{}, SortKItem{}} (From:SortVariablesCell{}))) [subsort{SortVariablesCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortList{}, SortKItem{}} (From:SortList{}))) [subsort{SortList{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCellOpt{}, SortKItem{}} (From:SortGeneratedCounterCellOpt{}))) [subsort{SortGeneratedCounterCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCell{}, SortKItem{}} (From:SortGeneratedTopCell{}))) [subsort{SortGeneratedTopCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSequence{}, SortKItem{}} (From:SortSequence{}))) [subsort{SortSequence{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStateCellOpt{}, \equals{SortStateCellOpt{}, R} (Val:SortStateCellOpt{}, inj{SortStateCell{}, SortStateCellOpt{}} (From:SortStateCell{}))) [subsort{SortStateCell{}, SortStateCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLine{}, SortKItem{}} (From:SortLine{}))) [subsort{SortLine{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBool{}, SortKItem{}} (From:SortBool{}))) [subsort{SortBool{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCellFragment{}, SortKItem{}} (From:SortTCellFragment{}))) [subsort{SortTCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortAssignment{}, SortKItem{}} (From:SortAssignment{}))) [subsort{SortAssignment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortProgram{}, SortKItem{}} (From:SortProgram{}))) [subsort{SortProgram{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortLiteral{}, SortKItem{}} (From:SortLiteral{}))) [subsort{SortLiteral{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortVariableDeclaration{}, SortKItem{}} (From:SortVariableDeclaration{}))) [subsort{SortVariableDeclaration{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortGeneratedCounterCellOpt{}, \equals{SortGeneratedCounterCellOpt{}, R} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortChoice{}, SortKItem{}} (From:SortChoice{}))) [subsort{SortChoice{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCell{}, SortKItem{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortHavoc{}, SortKItem{}} (From:SortHavoc{}))) [subsort{SortHavoc{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (From:SortGeneratedTopCellFragment{}))) [subsort{SortGeneratedTopCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortVariablesCellOpt{}, \equals{SortVariablesCellOpt{}, R} (Val:SortVariablesCellOpt{}, inj{SortVariablesCell{}, SortVariablesCellOpt{}} (From:SortVariablesCell{}))) [subsort{SortVariablesCell{}, SortVariablesCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInt{}, SortKItem{}} (From:SortInt{}))) [subsort{SortInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStateCell{}, SortKItem{}} (From:SortStateCell{}))) [subsort{SortStateCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTransitionsCellOpt{}, SortKItem{}} (From:SortTransitionsCellOpt{}))) [subsort{SortTransitionsCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortTransitionsCellOpt{}, \equals{SortTransitionsCellOpt{}, R} (Val:SortTransitionsCellOpt{}, inj{SortTransitionsCell{}, SortTransitionsCellOpt{}} (From:SortTransitionsCell{}))) [subsort{SortTransitionsCell{}, SortTransitionsCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTransitionsCell{}, SortKItem{}} (From:SortTransitionsCell{}))) [subsort{SortTransitionsCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortChoiceOrBlocks{}, SortKItem{}} (From:SortChoiceOrBlocks{}))) [subsort{SortChoiceOrBlocks{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStateCellFragment{}, SortKItem{}} (From:SortStateCellFragment{}))) [subsort{SortStateCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortOperation{}, \equals{SortOperation{}, R} (Val:SortOperation{}, inj{SortChoice{}, SortOperation{}} (From:SortChoice{}))) [subsort{SortChoice{}, SortOperation{}}()] // subsort
  axiom{R} \exists{R} (Val:SortOperation{}, \equals{SortOperation{}, R} (Val:SortOperation{}, inj{SortAssignment{}, SortOperation{}} (From:SortAssignment{}))) [subsort{SortAssignment{}, SortOperation{}}()] // subsort
  axiom{R} \exists{R} (Val:SortOperation{}, \equals{SortOperation{}, R} (Val:SortOperation{}, inj{SortHavoc{}, SortOperation{}} (From:SortHavoc{}))) [subsort{SortHavoc{}, SortOperation{}}()] // subsort
  axiom{R} \exists{R} (Val:SortOperation{}, \equals{SortOperation{}, R} (Val:SortOperation{}, inj{SortAssumption{}, SortOperation{}} (From:SortAssumption{}))) [subsort{SortAssumption{}, SortOperation{}}()] // subsort
  axiom{R} \exists{R} (Val:SortLine{}, \equals{SortLine{}, R} (Val:SortLine{}, inj{SortTransition{}, SortLine{}} (From:SortTransition{}))) [subsort{SortTransition{}, SortLine{}}()] // subsort
  axiom{R} \exists{R} (Val:SortLine{}, \equals{SortLine{}, R} (Val:SortLine{}, inj{SortVariableDeclaration{}, SortLine{}} (From:SortVariableDeclaration{}))) [subsort{SortVariableDeclaration{}, SortLine{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKConfigVar{}, SortKItem{}} (From:SortKConfigVar{}))) [subsort{SortKConfigVar{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortLiteral{}, \equals{SortLiteral{}, R} (Val:SortLiteral{}, inj{SortInt{}, SortLiteral{}} (From:SortInt{}))) [subsort{SortInt{}, SortLiteral{}}()] // subsort
  axiom{R} \exists{R} (Val:SortLiteral{}, \equals{SortLiteral{}, R} (Val:SortLiteral{}, inj{SortBool{}, SortLiteral{}} (From:SortBool{}))) [subsort{SortBool{}, SortLiteral{}}()] // subsort
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Stop'List{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortChoiceOrBlocks{}, \equals{SortChoiceOrBlocks{}, R} (Val:SortChoiceOrBlocks{}, Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks'QuotRBraUnds'ChoiceOrBlocks{}())) [functional{}()] // functional
  axiom{}\not{SortChoiceOrBlocks{}} (\and{SortChoiceOrBlocks{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks'QuotRBraUnds'ChoiceOrBlocks{}(), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks{}(Y0:SortChoiceOrBlock{}, Y1:SortChoiceOrBlocks{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortProgram{}, \equals{SortProgram{}, R} (Val:SortProgram{}, Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program'QuotRBraUnds'Program{}())) [functional{}()] // functional
  axiom{}\not{SortProgram{}} (\and{SortProgram{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program'QuotRBraUnds'Program{}(), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program{}(Y0:SortLine{}, Y1:SortProgram{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSequence{}, \equals{SortSequence{}, R} (Val:SortSequence{}, Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence'QuotRBraUnds'Sequence{}())) [functional{}()] // functional
  axiom{}\not{SortSequence{}} (\and{SortSequence{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence'QuotRBraUnds'Sequence{}(), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence{}(Y0:SortOperation{}, Y1:SortSequence{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Stop'Map{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Stop'Set{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCell{}, \equals{SortTCell{}, R} (Val:SortTCell{}, Lbl'-LT-'T'-GT-'{}(K0:SortKCell{}, K1:SortStateCell{}))) [functional{}()] // functional
  axiom{}\implies{SortTCell{}} (\and{SortTCell{}} (Lbl'-LT-'T'-GT-'{}(X0:SortKCell{}, X1:SortStateCell{}), Lbl'-LT-'T'-GT-'{}(Y0:SortKCell{}, Y1:SortStateCell{})), Lbl'-LT-'T'-GT-'{}(\and{SortKCell{}} (X0:SortKCell{}, Y0:SortKCell{}), \and{SortStateCell{}} (X1:SortStateCell{}, Y1:SortStateCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortTCellFragment{}, \equals{SortTCellFragment{}, R} (Val:SortTCellFragment{}, Lbl'-LT-'T'-GT-'-fragment{}(K0:SortKCellOpt{}, K1:SortStateCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortTCellFragment{}} (\and{SortTCellFragment{}} (Lbl'-LT-'T'-GT-'-fragment{}(X0:SortKCellOpt{}, X1:SortStateCellOpt{}), Lbl'-LT-'T'-GT-'-fragment{}(Y0:SortKCellOpt{}, Y1:SortStateCellOpt{})), Lbl'-LT-'T'-GT-'-fragment{}(\and{SortKCellOpt{}} (X0:SortKCellOpt{}, Y0:SortKCellOpt{}), \and{SortStateCellOpt{}} (X1:SortStateCellOpt{}, Y1:SortStateCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedCounterCell{}, \equals{SortGeneratedCounterCell{}, R} (Val:SortGeneratedCounterCell{}, Lbl'-LT-'generatedCounter'-GT-'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedCounterCell{}} (\and{SortGeneratedCounterCell{}} (Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{}), Lbl'-LT-'generatedCounter'-GT-'{}(Y0:SortInt{})), Lbl'-LT-'generatedCounter'-GT-'{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCell{}, \equals{SortGeneratedTopCell{}, R} (Val:SortGeneratedTopCell{}, Lbl'-LT-'generatedTop'-GT-'{}(K0:SortTCell{}, K1:SortGeneratedCounterCell{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCell{}} (\and{SortGeneratedTopCell{}} (Lbl'-LT-'generatedTop'-GT-'{}(X0:SortTCell{}, X1:SortGeneratedCounterCell{}), Lbl'-LT-'generatedTop'-GT-'{}(Y0:SortTCell{}, Y1:SortGeneratedCounterCell{})), Lbl'-LT-'generatedTop'-GT-'{}(\and{SortTCell{}} (X0:SortTCell{}, Y0:SortTCell{}), \and{SortGeneratedCounterCell{}} (X1:SortGeneratedCounterCell{}, Y1:SortGeneratedCounterCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCellFragment{}, \equals{SortGeneratedTopCellFragment{}, R} (Val:SortGeneratedTopCellFragment{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(K0:SortTCellOpt{}, K1:SortGeneratedCounterCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCellFragment{}} (\and{SortGeneratedTopCellFragment{}} (Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortTCellOpt{}, X1:SortGeneratedCounterCellOpt{}), Lbl'-LT-'generatedTop'-GT-'-fragment{}(Y0:SortTCellOpt{}, Y1:SortGeneratedCounterCellOpt{})), Lbl'-LT-'generatedTop'-GT-'-fragment{}(\and{SortTCellOpt{}} (X0:SortTCellOpt{}, Y0:SortTCellOpt{}), \and{SortGeneratedCounterCellOpt{}} (X1:SortGeneratedCounterCellOpt{}, Y1:SortGeneratedCounterCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKCell{}, \equals{SortKCell{}, R} (Val:SortKCell{}, Lbl'-LT-'k'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKCell{}} (\and{SortKCell{}} (Lbl'-LT-'k'-GT-'{}(X0:SortK{}), Lbl'-LT-'k'-GT-'{}(Y0:SortK{})), Lbl'-LT-'k'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStateCell{}, \equals{SortStateCell{}, R} (Val:SortStateCell{}, Lbl'-LT-'state'-GT-'{}(K0:SortVariablesCell{}, K1:SortTransitionsCell{}))) [functional{}()] // functional
  axiom{}\implies{SortStateCell{}} (\and{SortStateCell{}} (Lbl'-LT-'state'-GT-'{}(X0:SortVariablesCell{}, X1:SortTransitionsCell{}), Lbl'-LT-'state'-GT-'{}(Y0:SortVariablesCell{}, Y1:SortTransitionsCell{})), Lbl'-LT-'state'-GT-'{}(\and{SortVariablesCell{}} (X0:SortVariablesCell{}, Y0:SortVariablesCell{}), \and{SortTransitionsCell{}} (X1:SortTransitionsCell{}, Y1:SortTransitionsCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStateCellFragment{}, \equals{SortStateCellFragment{}, R} (Val:SortStateCellFragment{}, Lbl'-LT-'state'-GT-'-fragment{}(K0:SortVariablesCellOpt{}, K1:SortTransitionsCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortStateCellFragment{}} (\and{SortStateCellFragment{}} (Lbl'-LT-'state'-GT-'-fragment{}(X0:SortVariablesCellOpt{}, X1:SortTransitionsCellOpt{}), Lbl'-LT-'state'-GT-'-fragment{}(Y0:SortVariablesCellOpt{}, Y1:SortTransitionsCellOpt{})), Lbl'-LT-'state'-GT-'-fragment{}(\and{SortVariablesCellOpt{}} (X0:SortVariablesCellOpt{}, Y0:SortVariablesCellOpt{}), \and{SortTransitionsCellOpt{}} (X1:SortTransitionsCellOpt{}, Y1:SortTransitionsCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortTransitionsCell{}, \equals{SortTransitionsCell{}, R} (Val:SortTransitionsCell{}, Lbl'-LT-'transitions'-GT-'{}(K0:SortList{}))) [functional{}()] // functional
  axiom{}\implies{SortTransitionsCell{}} (\and{SortTransitionsCell{}} (Lbl'-LT-'transitions'-GT-'{}(X0:SortList{}), Lbl'-LT-'transitions'-GT-'{}(Y0:SortList{})), Lbl'-LT-'transitions'-GT-'{}(\and{SortList{}} (X0:SortList{}, Y0:SortList{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortVariablesCell{}, \equals{SortVariablesCell{}, R} (Val:SortVariablesCell{}, Lbl'-LT-'variables'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortVariablesCell{}} (\and{SortVariablesCell{}} (Lbl'-LT-'variables'-GT-'{}(X0:SortMap{}), Lbl'-LT-'variables'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'variables'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, LblListItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, LblMap'Coln'lookupOrDefault{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblMap'Coln'update{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSet'Coln'difference{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblSet'Coln'in{}(K0:SortKItem{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSetItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'-Map'UndsUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAssignment{}, \equals{SortAssignment{}, R} (Val:SortAssignment{}, Lbl'UndsColnEqlsUndsUnds'XSTS-SYNTAX'Unds'Assignment'Unds'Id'Unds'Literal{}(K0:SortId{}, K1:SortLiteral{}))) [functional{}()] // functional
  axiom{}\implies{SortAssignment{}} (\and{SortAssignment{}} (Lbl'UndsColnEqlsUndsUnds'XSTS-SYNTAX'Unds'Assignment'Unds'Id'Unds'Literal{}(X0:SortId{}, X1:SortLiteral{}), Lbl'UndsColnEqlsUndsUnds'XSTS-SYNTAX'Unds'Assignment'Unds'Id'Unds'Literal{}(Y0:SortId{}, Y1:SortLiteral{})), Lbl'UndsColnEqlsUndsUnds'XSTS-SYNTAX'Unds'Assignment'Unds'Id'Unds'Literal{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortLiteral{}} (X1:SortLiteral{}, Y1:SortLiteral{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'Unds'Bool'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'Unds'Bool'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(K1:SortList{},K2:SortList{}),K3:SortList{}),Lbl'Unds'List'Unds'{}(K1:SortList{},Lbl'Unds'List'Unds'{}(K2:SortList{},K3:SortList{}))) [assoc{}()] // associativity
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(K:SortList{},Lbl'Stop'List{}()),K:SortList{}) [unit{}()] // right unit
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),K:SortList{}),K:SortList{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Unds'List'Unds'{}(K0:SortList{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),K3:SortMap{}),Lbl'Unds'Map'Unds'{}(K1:SortMap{},Lbl'Unds'Map'Unds'{}(K2:SortMap{},K3:SortMap{}))) [assoc{}()] // associativity
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K:SortMap{},Lbl'Stop'Map{}()),K:SortMap{}) [unit{}()] // right unit
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Stop'Map{}(),K:SortMap{}),K:SortMap{}) [unit{}()] // left unit
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),K3:SortSet{}),Lbl'Unds'Set'Unds'{}(K1:SortSet{},Lbl'Unds'Set'Unds'{}(K2:SortSet{},K3:SortSet{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},K:SortSet{}),K:SortSet{}) [idem{}()] // idempotency
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},Lbl'Stop'Set{}()),K:SortSet{}) [unit{}()] // right unit
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Stop'Set{}(),K:SortSet{}),K:SortSet{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(K0:SortMap{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortChoiceOrBlocks{}, \equals{SortChoiceOrBlocks{}, R} (Val:SortChoiceOrBlocks{}, Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks{}(K0:SortChoiceOrBlock{}, K1:SortChoiceOrBlocks{}))) [functional{}()] // functional
  axiom{}\implies{SortChoiceOrBlocks{}} (\and{SortChoiceOrBlocks{}} (Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks{}(X0:SortChoiceOrBlock{}, X1:SortChoiceOrBlocks{}), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks{}(Y0:SortChoiceOrBlock{}, Y1:SortChoiceOrBlocks{})), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks{}(\and{SortChoiceOrBlock{}} (X0:SortChoiceOrBlock{}, Y0:SortChoiceOrBlock{}), \and{SortChoiceOrBlocks{}} (X1:SortChoiceOrBlocks{}, Y1:SortChoiceOrBlocks{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortProgram{}, \equals{SortProgram{}, R} (Val:SortProgram{}, Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program{}(K0:SortLine{}, K1:SortProgram{}))) [functional{}()] // functional
  axiom{}\implies{SortProgram{}} (\and{SortProgram{}} (Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program{}(X0:SortLine{}, X1:SortProgram{}), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program{}(Y0:SortLine{}, Y1:SortProgram{})), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program{}(\and{SortLine{}} (X0:SortLine{}, Y0:SortLine{}), \and{SortProgram{}} (X1:SortProgram{}, Y1:SortProgram{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortSequence{}, \equals{SortSequence{}, R} (Val:SortSequence{}, Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence{}(K0:SortOperation{}, K1:SortSequence{}))) [functional{}()] // functional
  axiom{}\implies{SortSequence{}} (\and{SortSequence{}} (Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence{}(X0:SortOperation{}, X1:SortSequence{}), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence{}(Y0:SortOperation{}, Y1:SortSequence{})), Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence{}(\and{SortOperation{}} (X0:SortOperation{}, Y0:SortOperation{}), \and{SortSequence{}} (X1:SortSequence{}, Y1:SortSequence{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'inList'Unds'{}(K0:SortKItem{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(K0:SortKItem{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsPipe'-'-GT-Unds'{}(K0:SortKItem{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAssumption{}, \equals{SortAssumption{}, R} (Val:SortAssumption{}, Lblassume'LParUndsRParUnds'XSTS-SYNTAX'Unds'Assumption'Unds'Literal{}(K0:SortLiteral{}))) [functional{}()] // functional
  axiom{}\implies{SortAssumption{}} (\and{SortAssumption{}} (Lblassume'LParUndsRParUnds'XSTS-SYNTAX'Unds'Assumption'Unds'Literal{}(X0:SortLiteral{}), Lblassume'LParUndsRParUnds'XSTS-SYNTAX'Unds'Assumption'Unds'Literal{}(Y0:SortLiteral{})), Lblassume'LParUndsRParUnds'XSTS-SYNTAX'Unds'Assumption'Unds'Literal{}(\and{SortLiteral{}} (X0:SortLiteral{}, Y0:SortLiteral{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortChoice{}, \equals{SortChoice{}, R} (Val:SortChoice{}, Lblchoice'LBraUndsRBraUndsUnds'XSTS-SYNTAX'Unds'Choice'Unds'Sequence'Unds'ChoiceOrBlocks{}(K0:SortSequence{}, K1:SortChoiceOrBlocks{}))) [functional{}()] // functional
  axiom{}\implies{SortChoice{}} (\and{SortChoice{}} (Lblchoice'LBraUndsRBraUndsUnds'XSTS-SYNTAX'Unds'Choice'Unds'Sequence'Unds'ChoiceOrBlocks{}(X0:SortSequence{}, X1:SortChoiceOrBlocks{}), Lblchoice'LBraUndsRBraUndsUnds'XSTS-SYNTAX'Unds'Choice'Unds'Sequence'Unds'ChoiceOrBlocks{}(Y0:SortSequence{}, Y1:SortChoiceOrBlocks{})), Lblchoice'LBraUndsRBraUndsUnds'XSTS-SYNTAX'Unds'Choice'Unds'Sequence'Unds'ChoiceOrBlocks{}(\and{SortSequence{}} (X0:SortSequence{}, Y0:SortSequence{}), \and{SortChoiceOrBlocks{}} (X1:SortChoiceOrBlocks{}, Y1:SortChoiceOrBlocks{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortLiteral{}, \equals{SortLiteral{}, R} (Val:SortLiteral{}, Lblempty'Unds'XSTS-SYNTAX'Unds'Literal{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortHavoc{}, \equals{SortHavoc{}, R} (Val:SortHavoc{}, Lblhavoc'LParUndsRParUnds'XSTS-SYNTAX'Unds'Havoc'Unds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortHavoc{}} (\and{SortHavoc{}} (Lblhavoc'LParUndsRParUnds'XSTS-SYNTAX'Unds'Havoc'Unds'Id{}(X0:SortId{}), Lblhavoc'LParUndsRParUnds'XSTS-SYNTAX'Unds'Havoc'Unds'Id{}(Y0:SortId{})), Lblhavoc'LParUndsRParUnds'XSTS-SYNTAX'Unds'Havoc'Unds'Id{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedCounterCell{}, \equals{SortGeneratedCounterCell{}, R} (Val:SortGeneratedCounterCell{}, LblinitGeneratedCounterCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStateCell{}, \equals{SortStateCell{}, R} (Val:SortStateCell{}, LblinitStateCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTransitionsCell{}, \equals{SortTransitionsCell{}, R} (Val:SortTransitionsCell{}, LblinitTransitionsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortVariablesCell{}, \equals{SortVariablesCell{}, R} (Val:SortVariablesCell{}, LblinitVariablesCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisAssignment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisAssumption{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisBool{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisChoice{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisChoiceOrBlock{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisChoiceOrBlocks{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedCounterCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedCounterCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedTopCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedTopCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisHavoc{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisId{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisInt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisK{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKConfigVar{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKItem{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisLine{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisList{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisLiteral{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisMap{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisOperation{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisProgram{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisSequence{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisSet{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStateCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStateCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStateCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTransition{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTransitionsCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTransitionsCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisVariableDeclaration{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisVariablesCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisVariablesCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lblkeys'LParUndsRParUnds'MAP'Unds'Set'Unds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortGeneratedCounterCellOpt{}, \equals{SortGeneratedCounterCellOpt{}, R} (Val:SortGeneratedCounterCellOpt{}, LblnoGeneratedCounterCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, LblnoKCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStateCellOpt{}, \equals{SortStateCellOpt{}, R} (Val:SortStateCellOpt{}, LblnoStateCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCellOpt{}, \equals{SortTCellOpt{}, R} (Val:SortTCellOpt{}, LblnoTCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTransitionsCellOpt{}, \equals{SortTransitionsCellOpt{}, R} (Val:SortTransitionsCellOpt{}, LblnoTransitionsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortVariablesCellOpt{}, \equals{SortVariablesCellOpt{}, R} (Val:SortVariablesCellOpt{}, LblnoVariablesCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortChoiceOrBlock{}, \equals{SortChoiceOrBlock{}, R} (Val:SortChoiceOrBlock{}, Lblor'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'ChoiceOrBlock'Unds'Sequence{}(K0:SortSequence{}))) [functional{}()] // functional
  axiom{}\implies{SortChoiceOrBlock{}} (\and{SortChoiceOrBlock{}} (Lblor'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'ChoiceOrBlock'Unds'Sequence{}(X0:SortSequence{}), Lblor'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'ChoiceOrBlock'Unds'Sequence{}(Y0:SortSequence{})), Lblor'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'ChoiceOrBlock'Unds'Sequence{}(\and{SortSequence{}} (X0:SortSequence{}, Y0:SortSequence{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, LblpushList{}(K0:SortKItem{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblremoveAll'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Set{}(K0:SortMap{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(K0:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblsizeList{}(K0:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblsizeMap{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTransition{}, \equals{SortTransition{}, R} (Val:SortTransition{}, Lbltran'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'Transition'Unds'Sequence{}(K0:SortSequence{}))) [functional{}()] // functional
  axiom{}\implies{SortTransition{}} (\and{SortTransition{}} (Lbltran'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'Transition'Unds'Sequence{}(X0:SortSequence{}), Lbltran'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'Transition'Unds'Sequence{}(Y0:SortSequence{})), Lbltran'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'Transition'Unds'Sequence{}(\and{SortSequence{}} (X0:SortSequence{}, Y0:SortSequence{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblupdateMap'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortVariableDeclaration{}, \equals{SortVariableDeclaration{}, R} (Val:SortVariableDeclaration{}, Lblvar'UndsColn'boolean'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortVariableDeclaration{}} (\and{SortVariableDeclaration{}} (Lblvar'UndsColn'boolean'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(X0:SortId{}), Lblvar'UndsColn'boolean'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(Y0:SortId{})), Lblvar'UndsColn'boolean'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortVariableDeclaration{}} (\and{SortVariableDeclaration{}} (Lblvar'UndsColn'boolean'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(X0:SortId{}), Lblvar'UndsColn'integer'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(Y0:SortId{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortVariableDeclaration{}, \equals{SortVariableDeclaration{}, R} (Val:SortVariableDeclaration{}, Lblvar'UndsColn'integer'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortVariableDeclaration{}} (\and{SortVariableDeclaration{}} (Lblvar'UndsColn'integer'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(X0:SortId{}), Lblvar'UndsColn'integer'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(Y0:SortId{})), Lblvar'UndsColn'integer'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{} \or{SortAssignment{}} (\exists{SortAssignment{}} (X0:SortId{}, \exists{SortAssignment{}} (X1:SortLiteral{}, Lbl'UndsColnEqlsUndsUnds'XSTS-SYNTAX'Unds'Assignment'Unds'Id'Unds'Literal{}(X0:SortId{}, X1:SortLiteral{}))), \bottom{SortAssignment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortAssumption{}} (\exists{SortAssumption{}} (X0:SortLiteral{}, Lblassume'LParUndsRParUnds'XSTS-SYNTAX'Unds'Assumption'Unds'Literal{}(X0:SortLiteral{})), \bottom{SortAssumption{}}()) [constructor{}()] // no junk
  axiom{} \or{SortBool{}} (\top{SortBool{}}(), \bottom{SortBool{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortChoice{}} (\exists{SortChoice{}} (X0:SortSequence{}, \exists{SortChoice{}} (X1:SortChoiceOrBlocks{}, Lblchoice'LBraUndsRBraUndsUnds'XSTS-SYNTAX'Unds'Choice'Unds'Sequence'Unds'ChoiceOrBlocks{}(X0:SortSequence{}, X1:SortChoiceOrBlocks{}))), \bottom{SortChoice{}}()) [constructor{}()] // no junk
  axiom{} \or{SortChoiceOrBlock{}} (\exists{SortChoiceOrBlock{}} (X0:SortSequence{}, Lblor'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'ChoiceOrBlock'Unds'Sequence{}(X0:SortSequence{})), \bottom{SortChoiceOrBlock{}}()) [constructor{}()] // no junk
  axiom{} \or{SortChoiceOrBlocks{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks'QuotRBraUnds'ChoiceOrBlocks{}(), \exists{SortChoiceOrBlocks{}} (X0:SortChoiceOrBlock{}, \exists{SortChoiceOrBlocks{}} (X1:SortChoiceOrBlocks{}, Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'ChoiceOrBlocks'Unds'ChoiceOrBlock'Unds'ChoiceOrBlocks{}(X0:SortChoiceOrBlock{}, X1:SortChoiceOrBlocks{}))), \bottom{SortChoiceOrBlocks{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCell{}} (\exists{SortGeneratedCounterCell{}} (X0:SortInt{}, Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{})), \bottom{SortGeneratedCounterCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCellOpt{}} (LblnoGeneratedCounterCell{}(), \exists{SortGeneratedCounterCellOpt{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}} (Val:SortGeneratedCounterCell{})), \bottom{SortGeneratedCounterCellOpt{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCell{}} (\exists{SortGeneratedTopCell{}} (X0:SortTCell{}, \exists{SortGeneratedTopCell{}} (X1:SortGeneratedCounterCell{}, Lbl'-LT-'generatedTop'-GT-'{}(X0:SortTCell{}, X1:SortGeneratedCounterCell{}))), \bottom{SortGeneratedTopCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCellFragment{}} (\exists{SortGeneratedTopCellFragment{}} (X0:SortTCellOpt{}, \exists{SortGeneratedTopCellFragment{}} (X1:SortGeneratedCounterCellOpt{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortTCellOpt{}, X1:SortGeneratedCounterCellOpt{}))), \bottom{SortGeneratedTopCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortHavoc{}} (\exists{SortHavoc{}} (X0:SortId{}, Lblhavoc'LParUndsRParUnds'XSTS-SYNTAX'Unds'Havoc'Unds'Id{}(X0:SortId{})), \bottom{SortHavoc{}}()) [constructor{}()] // no junk
  axiom{} \or{SortId{}} (\top{SortId{}}(), \bottom{SortId{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortInt{}} (\top{SortInt{}}(), \bottom{SortInt{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKCell{}} (\exists{SortKCell{}} (X0:SortK{}, Lbl'-LT-'k'-GT-'{}(X0:SortK{})), \bottom{SortKCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKCellOpt{}} (LblnoKCell{}(), \exists{SortKCellOpt{}} (Val:SortKCell{}, inj{SortKCell{}, SortKCellOpt{}} (Val:SortKCell{})), \bottom{SortKCellOpt{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKConfigVar{}} (\top{SortKConfigVar{}}(), \bottom{SortKConfigVar{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAssignment{}, inj{SortAssignment{}, SortKItem{}} (Val:SortAssignment{})), \exists{SortKItem{}} (Val:SortAssumption{}, inj{SortAssumption{}, SortKItem{}} (Val:SortAssumption{})), \exists{SortKItem{}} (Val:SortBool{}, inj{SortBool{}, SortKItem{}} (Val:SortBool{})), \exists{SortKItem{}} (Val:SortChoice{}, inj{SortChoice{}, SortKItem{}} (Val:SortChoice{})), \exists{SortKItem{}} (Val:SortChoiceOrBlock{}, inj{SortChoiceOrBlock{}, SortKItem{}} (Val:SortChoiceOrBlock{})), \exists{SortKItem{}} (Val:SortChoiceOrBlocks{}, inj{SortChoiceOrBlocks{}, SortKItem{}} (Val:SortChoiceOrBlocks{})), \exists{SortKItem{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (Val:SortGeneratedCounterCell{})), \exists{SortKItem{}} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCellOpt{}, SortKItem{}} (Val:SortGeneratedCounterCellOpt{})), \exists{SortKItem{}} (Val:SortGeneratedTopCell{}, inj{SortGeneratedTopCell{}, SortKItem{}} (Val:SortGeneratedTopCell{})), \exists{SortKItem{}} (Val:SortGeneratedTopCellFragment{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (Val:SortGeneratedTopCellFragment{})), \exists{SortKItem{}} (Val:SortHavoc{}, inj{SortHavoc{}, SortKItem{}} (Val:SortHavoc{})), \exists{SortKItem{}} (Val:SortId{}, inj{SortId{}, SortKItem{}} (Val:SortId{})), \exists{SortKItem{}} (Val:SortInt{}, inj{SortInt{}, SortKItem{}} (Val:SortInt{})), \exists{SortKItem{}} (Val:SortKCell{}, inj{SortKCell{}, SortKItem{}} (Val:SortKCell{})), \exists{SortKItem{}} (Val:SortKCellOpt{}, inj{SortKCellOpt{}, SortKItem{}} (Val:SortKCellOpt{})), \exists{SortKItem{}} (Val:SortKConfigVar{}, inj{SortKConfigVar{}, SortKItem{}} (Val:SortKConfigVar{})), \exists{SortKItem{}} (Val:SortLine{}, inj{SortLine{}, SortKItem{}} (Val:SortLine{})), \exists{SortKItem{}} (Val:SortList{}, inj{SortList{}, SortKItem{}} (Val:SortList{})), \exists{SortKItem{}} (Val:SortLiteral{}, inj{SortLiteral{}, SortKItem{}} (Val:SortLiteral{})), \exists{SortKItem{}} (Val:SortMap{}, inj{SortMap{}, SortKItem{}} (Val:SortMap{})), \exists{SortKItem{}} (Val:SortOperation{}, inj{SortOperation{}, SortKItem{}} (Val:SortOperation{})), \exists{SortKItem{}} (Val:SortProgram{}, inj{SortProgram{}, SortKItem{}} (Val:SortProgram{})), \exists{SortKItem{}} (Val:SortSequence{}, inj{SortSequence{}, SortKItem{}} (Val:SortSequence{})), \exists{SortKItem{}} (Val:SortSet{}, inj{SortSet{}, SortKItem{}} (Val:SortSet{})), \exists{SortKItem{}} (Val:SortStateCell{}, inj{SortStateCell{}, SortKItem{}} (Val:SortStateCell{})), \exists{SortKItem{}} (Val:SortStateCellFragment{}, inj{SortStateCellFragment{}, SortKItem{}} (Val:SortStateCellFragment{})), \exists{SortKItem{}} (Val:SortStateCellOpt{}, inj{SortStateCellOpt{}, SortKItem{}} (Val:SortStateCellOpt{})), \exists{SortKItem{}} (Val:SortTCell{}, inj{SortTCell{}, SortKItem{}} (Val:SortTCell{})), \exists{SortKItem{}} (Val:SortTCellFragment{}, inj{SortTCellFragment{}, SortKItem{}} (Val:SortTCellFragment{})), \exists{SortKItem{}} (Val:SortTCellOpt{}, inj{SortTCellOpt{}, SortKItem{}} (Val:SortTCellOpt{})), \exists{SortKItem{}} (Val:SortTransition{}, inj{SortTransition{}, SortKItem{}} (Val:SortTransition{})), \exists{SortKItem{}} (Val:SortTransitionsCell{}, inj{SortTransitionsCell{}, SortKItem{}} (Val:SortTransitionsCell{})), \exists{SortKItem{}} (Val:SortTransitionsCellOpt{}, inj{SortTransitionsCellOpt{}, SortKItem{}} (Val:SortTransitionsCellOpt{})), \exists{SortKItem{}} (Val:SortVariableDeclaration{}, inj{SortVariableDeclaration{}, SortKItem{}} (Val:SortVariableDeclaration{})), \exists{SortKItem{}} (Val:SortVariablesCell{}, inj{SortVariablesCell{}, SortKItem{}} (Val:SortVariablesCell{})), \exists{SortKItem{}} (Val:SortVariablesCellOpt{}, inj{SortVariablesCellOpt{}, SortKItem{}} (Val:SortVariablesCellOpt{})), \bottom{SortKItem{}}()) [constructor{}()] // no junk
  axiom{} \or{SortLine{}} (\exists{SortLine{}} (Val:SortTransition{}, inj{SortTransition{}, SortLine{}} (Val:SortTransition{})), \exists{SortLine{}} (Val:SortVariableDeclaration{}, inj{SortVariableDeclaration{}, SortLine{}} (Val:SortVariableDeclaration{})), \bottom{SortLine{}}()) [constructor{}()] // no junk
  axiom{} \or{SortLiteral{}} (Lblempty'Unds'XSTS-SYNTAX'Unds'Literal{}(), \exists{SortLiteral{}} (Val:SortBool{}, inj{SortBool{}, SortLiteral{}} (Val:SortBool{})), \exists{SortLiteral{}} (Val:SortInt{}, inj{SortInt{}, SortLiteral{}} (Val:SortInt{})), \bottom{SortLiteral{}}()) [constructor{}()] // no junk
  axiom{} \or{SortOperation{}} (\exists{SortOperation{}} (Val:SortAssignment{}, inj{SortAssignment{}, SortOperation{}} (Val:SortAssignment{})), \exists{SortOperation{}} (Val:SortAssumption{}, inj{SortAssumption{}, SortOperation{}} (Val:SortAssumption{})), \exists{SortOperation{}} (Val:SortChoice{}, inj{SortChoice{}, SortOperation{}} (Val:SortChoice{})), \exists{SortOperation{}} (Val:SortHavoc{}, inj{SortHavoc{}, SortOperation{}} (Val:SortHavoc{})), \bottom{SortOperation{}}()) [constructor{}()] // no junk
  axiom{} \or{SortProgram{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program'QuotRBraUnds'Program{}(), \exists{SortProgram{}} (X0:SortLine{}, \exists{SortProgram{}} (X1:SortProgram{}, Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program{}(X0:SortLine{}, X1:SortProgram{}))), \bottom{SortProgram{}}()) [constructor{}()] // no junk
  axiom{} \or{SortSequence{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence'QuotRBraUnds'Sequence{}(), \exists{SortSequence{}} (X0:SortOperation{}, \exists{SortSequence{}} (X1:SortSequence{}, Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Sequence'Unds'Operation'Unds'Sequence{}(X0:SortOperation{}, X1:SortSequence{}))), \bottom{SortSequence{}}()) [constructor{}()] // no junk
  axiom{} \or{SortStateCell{}} (\exists{SortStateCell{}} (X0:SortVariablesCell{}, \exists{SortStateCell{}} (X1:SortTransitionsCell{}, Lbl'-LT-'state'-GT-'{}(X0:SortVariablesCell{}, X1:SortTransitionsCell{}))), \bottom{SortStateCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortStateCellFragment{}} (\exists{SortStateCellFragment{}} (X0:SortVariablesCellOpt{}, \exists{SortStateCellFragment{}} (X1:SortTransitionsCellOpt{}, Lbl'-LT-'state'-GT-'-fragment{}(X0:SortVariablesCellOpt{}, X1:SortTransitionsCellOpt{}))), \bottom{SortStateCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortStateCellOpt{}} (LblnoStateCell{}(), \exists{SortStateCellOpt{}} (Val:SortStateCell{}, inj{SortStateCell{}, SortStateCellOpt{}} (Val:SortStateCell{})), \bottom{SortStateCellOpt{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTCell{}} (\exists{SortTCell{}} (X0:SortKCell{}, \exists{SortTCell{}} (X1:SortStateCell{}, Lbl'-LT-'T'-GT-'{}(X0:SortKCell{}, X1:SortStateCell{}))), \bottom{SortTCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTCellFragment{}} (\exists{SortTCellFragment{}} (X0:SortKCellOpt{}, \exists{SortTCellFragment{}} (X1:SortStateCellOpt{}, Lbl'-LT-'T'-GT-'-fragment{}(X0:SortKCellOpt{}, X1:SortStateCellOpt{}))), \bottom{SortTCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTCellOpt{}} (LblnoTCell{}(), \exists{SortTCellOpt{}} (Val:SortTCell{}, inj{SortTCell{}, SortTCellOpt{}} (Val:SortTCell{})), \bottom{SortTCellOpt{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTransition{}} (\exists{SortTransition{}} (X0:SortSequence{}, Lbltran'LBraUndsRBraUnds'XSTS-SYNTAX'Unds'Transition'Unds'Sequence{}(X0:SortSequence{})), \bottom{SortTransition{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTransitionsCell{}} (\exists{SortTransitionsCell{}} (X0:SortList{}, Lbl'-LT-'transitions'-GT-'{}(X0:SortList{})), \bottom{SortTransitionsCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortTransitionsCellOpt{}} (LblnoTransitionsCell{}(), \exists{SortTransitionsCellOpt{}} (Val:SortTransitionsCell{}, inj{SortTransitionsCell{}, SortTransitionsCellOpt{}} (Val:SortTransitionsCell{})), \bottom{SortTransitionsCellOpt{}}()) [constructor{}()] // no junk
  axiom{} \or{SortVariableDeclaration{}} (\exists{SortVariableDeclaration{}} (X0:SortId{}, Lblvar'UndsColn'boolean'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(X0:SortId{})), \exists{SortVariableDeclaration{}} (X0:SortId{}, Lblvar'UndsColn'integer'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(X0:SortId{})), \bottom{SortVariableDeclaration{}}()) [constructor{}()] // no junk
  axiom{} \or{SortVariablesCell{}} (\exists{SortVariablesCell{}} (X0:SortMap{}, Lbl'-LT-'variables'-GT-'{}(X0:SortMap{})), \bottom{SortVariablesCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortVariablesCellOpt{}} (LblnoVariablesCell{}(), \exists{SortVariablesCellOpt{}} (Val:SortVariablesCell{}, inj{SortVariablesCell{}, SortVariablesCellOpt{}} (Val:SortVariablesCell{})), \bottom{SortVariablesCellOpt{}}()) [constructor{}()] // no junk

// rules
// rule `<generatedTop>`(`<T>`(`<k>`(``inj{Transition,KItem}(T) #as _Gen3``~>_DotVar2),`<state>`(_DotVar3,`<transitions>`(_DotVar4))),_DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(_DotVar2),`<state>`(_DotVar3,`<transitions>`(`_List_`(`ListItem`(_Gen3),_DotVar4)))),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c68a50bfc3d4cf8cef1f31f365b8b615f4ea0c2770f121afff1b8859dcd70ff6), cool-like, org.kframework.attributes.Location(Location(52,10,53,63)), org.kframework.attributes.Source(Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [symbol(#ruleNoConditions)])]
  axiom{} \rewrites{SortGeneratedTopCell{}} (
      \and{SortGeneratedTopCell{}} (
        Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(\and{SortKItem{}}(inj{SortTransition{}, SortKItem{}}(VarT:SortTransition{}),Var'Unds'Gen3:SortKItem{}),Var'Unds'DotVar2:SortK{})),Lbl'-LT-'state'-GT-'{}(Var'Unds'DotVar3:SortVariablesCell{},Lbl'-LT-'transitions'-GT-'{}(Var'Unds'DotVar4:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{}),
        \top{SortGeneratedTopCell{}}()),
      \and{SortGeneratedTopCell{}} (
      Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar2:SortK{}),Lbl'-LT-'state'-GT-'{}(Var'Unds'DotVar3:SortVariablesCell{},Lbl'-LT-'transitions'-GT-'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(Var'Unds'Gen3:SortKItem{}),Var'Unds'DotVar4:SortList{})))),Var'Unds'DotVar0:SortGeneratedCounterCell{}), \top{SortGeneratedTopCell{}}()))
  [UNIQUE'Unds'ID{}("c68a50bfc3d4cf8cef1f31f365b8b615f4ea0c2770f121afff1b8859dcd70ff6"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(52,10,53,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Program,KItem}(`.List{"___XSTS-SYNTAX_Program_Line_Program"}_Program`(.KList))~>_DotVar2),_DotVar1),_DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(_DotVar2),_DotVar1),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b466926e9a60fc6ab6df3f8a867638f42315face5de469d859d8d193db684b91), org.kframework.attributes.Location(Location(45,10,45,36)), org.kframework.attributes.Source(Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [symbol(#ruleNoConditions)])]
  axiom{} \rewrites{SortGeneratedTopCell{}} (
      \and{SortGeneratedTopCell{}} (
        Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProgram{}, SortKItem{}}(Lbl'Stop'List'LBraQuotUndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program'QuotRBraUnds'Program{}()),Var'Unds'DotVar2:SortK{})),Var'Unds'DotVar1:SortStateCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{}),
        \top{SortGeneratedTopCell{}}()),
      \and{SortGeneratedTopCell{}} (
      Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar2:SortK{}),Var'Unds'DotVar1:SortStateCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{}), \top{SortGeneratedTopCell{}}()))
  [UNIQUE'Unds'ID{}("b466926e9a60fc6ab6df3f8a867638f42315face5de469d859d8d193db684b91"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(45,10,45,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{Program,KItem}(`___XSTS-SYNTAX_Program_Line_Program`(L,P))~>_DotVar2),_DotVar1),_DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(inj{Line,KItem}(L)~>inj{Program,KItem}(P)~>_DotVar2),_DotVar1),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(19c130071776dd554da4215c4fedb395a56c55cb7c2d1afc3560ce9415fce123), org.kframework.attributes.Location(Location(44,10,44,48)), org.kframework.attributes.Source(Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [symbol(#ruleNoConditions)])]
  axiom{} \rewrites{SortGeneratedTopCell{}} (
      \and{SortGeneratedTopCell{}} (
        Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProgram{}, SortKItem{}}(Lbl'UndsUndsUnds'XSTS-SYNTAX'Unds'Program'Unds'Line'Unds'Program{}(VarL:SortLine{},VarP:SortProgram{})),Var'Unds'DotVar2:SortK{})),Var'Unds'DotVar1:SortStateCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{}),
        \top{SortGeneratedTopCell{}}()),
      \and{SortGeneratedTopCell{}} (
      Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortLine{}, SortKItem{}}(VarL:SortLine{}),kseq{}(inj{SortProgram{}, SortKItem{}}(VarP:SortProgram{}),Var'Unds'DotVar2:SortK{}))),Var'Unds'DotVar1:SortStateCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{}), \top{SortGeneratedTopCell{}}()))
  [UNIQUE'Unds'ID{}("19c130071776dd554da4215c4fedb395a56c55cb7c2d1afc3560ce9415fce123"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(44,10,44,48)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{VariableDeclaration,KItem}(`var_:boolean_XSTS-SYNTAX_VariableDeclaration_Id`(X))~>_DotVar2),`<state>`(`<variables>`(STATE),_DotVar3)),_DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(_DotVar2),`<state>`(`<variables>`(`Map:update`(STATE,inj{Id,KItem}(X),inj{Literal,KItem}(`empty_XSTS-SYNTAX_Literal`(.KList)))),_DotVar3)),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c8882df555fc8996b3a90547d52122b1ad7bc42c8fc067c7ac42f4255b3aa75f), org.kframework.attributes.Location(Location(50,10,51,64)), org.kframework.attributes.Source(Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [symbol(#ruleNoConditions)])]
  axiom{} \rewrites{SortGeneratedTopCell{}} (
      \and{SortGeneratedTopCell{}} (
        Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortVariableDeclaration{}, SortKItem{}}(Lblvar'UndsColn'boolean'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(VarX:SortId{})),Var'Unds'DotVar2:SortK{})),Lbl'-LT-'state'-GT-'{}(Lbl'-LT-'variables'-GT-'{}(VarSTATE:SortMap{}),Var'Unds'DotVar3:SortTransitionsCell{})),Var'Unds'DotVar0:SortGeneratedCounterCell{}),
        \top{SortGeneratedTopCell{}}()),
      \and{SortGeneratedTopCell{}} (
      Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar2:SortK{}),Lbl'-LT-'state'-GT-'{}(Lbl'-LT-'variables'-GT-'{}(LblMap'Coln'update{}(VarSTATE:SortMap{},inj{SortId{}, SortKItem{}}(VarX:SortId{}),inj{SortLiteral{}, SortKItem{}}(Lblempty'Unds'XSTS-SYNTAX'Unds'Literal{}()))),Var'Unds'DotVar3:SortTransitionsCell{})),Var'Unds'DotVar0:SortGeneratedCounterCell{}), \top{SortGeneratedTopCell{}}()))
  [UNIQUE'Unds'ID{}("c8882df555fc8996b3a90547d52122b1ad7bc42c8fc067c7ac42f4255b3aa75f"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(50,10,51,64)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]

// rule `<generatedTop>`(`<T>`(`<k>`(inj{VariableDeclaration,KItem}(`var_:integer_XSTS-SYNTAX_VariableDeclaration_Id`(X))~>_DotVar2),`<state>`(`<variables>`(STATE),_DotVar3)),_DotVar0)=>`<generatedTop>`(`<T>`(`<k>`(_DotVar2),`<state>`(`<variables>`(`Map:update`(STATE,inj{Id,KItem}(X),inj{Literal,KItem}(`empty_XSTS-SYNTAX_Literal`(.KList)))),_DotVar3)),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e0b48ad74ff93a84062677c471d9cf452181147125ab17782e0d9ead082722b9), org.kframework.attributes.Location(Location(48,10,49,64)), org.kframework.attributes.Source(Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [symbol(#ruleNoConditions)])]
  axiom{} \rewrites{SortGeneratedTopCell{}} (
      \and{SortGeneratedTopCell{}} (
        Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortVariableDeclaration{}, SortKItem{}}(Lblvar'UndsColn'integer'Unds'XSTS-SYNTAX'Unds'VariableDeclaration'Unds'Id{}(VarX:SortId{})),Var'Unds'DotVar2:SortK{})),Lbl'-LT-'state'-GT-'{}(Lbl'-LT-'variables'-GT-'{}(VarSTATE:SortMap{}),Var'Unds'DotVar3:SortTransitionsCell{})),Var'Unds'DotVar0:SortGeneratedCounterCell{}),
        \top{SortGeneratedTopCell{}}()),
      \and{SortGeneratedTopCell{}} (
      Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar2:SortK{}),Lbl'-LT-'state'-GT-'{}(Lbl'-LT-'variables'-GT-'{}(LblMap'Coln'update{}(VarSTATE:SortMap{},inj{SortId{}, SortKItem{}}(VarX:SortId{}),inj{SortLiteral{}, SortKItem{}}(Lblempty'Unds'XSTS-SYNTAX'Unds'Literal{}()))),Var'Unds'DotVar3:SortTransitionsCell{})),Var'Unds'DotVar0:SortGeneratedCounterCell{}), \top{SortGeneratedTopCell{}}()))
  [UNIQUE'Unds'ID{}("e0b48ad74ff93a84062677c471d9cf452181147125ab17782e0d9ead082722b9"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(48,10,49,64)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]

// rule `_|Set__SET_Set_Set_Set`(S1,S2)=>`_Set_`(S1,`Set:difference`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c384edb8f3875244a593dda6163c3dee1bce5485e4e1848892aebc2bab67d2e9), concrete, org.kframework.attributes.Location(Location(749,8,749,45)), org.kframework.attributes.Source(Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [symbol(#ruleNoConditions)])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortSet{}, R} (
            X0:SortSet{},
            VarS1:SortSet{}
          ),\and{R} (
          \in{SortSet{}, R} (
            X1:SortSet{},
            VarS2:SortSet{}
          ),
          \top{R} ()
        ))),
    \equals{SortSet{},R} (
      Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(X0:SortSet{},X1:SortSet{}),
     \and{SortSet{}} (
       Lbl'Unds'Set'Unds'{}(VarS1:SortSet{},LblSet'Coln'difference{}(VarS2:SortSet{},VarS1:SortSet{})),
        \top{SortSet{}}())))
  [UNIQUE'Unds'ID{}("c384edb8f3875244a593dda6163c3dee1bce5485e4e1848892aebc2bab67d2e9"), concrete{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(749,8,749,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]

// rule getGeneratedCounterCell(`<generatedTop>`(_DotVar0,Cell))=>Cell requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9ef5eb9b9e6bbd7436911fad20615821f61e06e742dd27773001ab0664bd1de3)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortGeneratedTopCell{}, R} (
            X0:SortGeneratedTopCell{},
            Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'DotVar0:SortTCell{},VarCell:SortGeneratedCounterCell{})
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedCounterCell{},R} (
      LblgetGeneratedCounterCell{}(X0:SortGeneratedTopCell{}),
     \and{SortGeneratedCounterCell{}} (
       VarCell:SortGeneratedCounterCell{},
        \top{SortGeneratedCounterCell{}}())))
  [UNIQUE'Unds'ID{}("9ef5eb9b9e6bbd7436911fad20615821f61e06e742dd27773001ab0664bd1de3")]

// rule initGeneratedCounterCell(.KList)=>`<generatedCounter>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5de11f6b50c4684c0e05b773f809d756f4ce9c03a4f24e23a9cddaf3fa31f553), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortGeneratedCounterCell{},R} (
      LblinitGeneratedCounterCell{}(),
     \and{SortGeneratedCounterCell{}} (
       Lbl'-LT-'generatedCounter'-GT-'{}(\dv{SortInt{}}("0")),
        \top{SortGeneratedCounterCell{}}())))
  [UNIQUE'Unds'ID{}("5de11f6b50c4684c0e05b773f809d756f4ce9c03a4f24e23a9cddaf3fa31f553")]

// rule initGeneratedTopCell(Init)=>`<generatedTop>`(initTCell(Init),initGeneratedCounterCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6bc7582a7d8c6574a248b085ad3bdecafbf86539963d4e752be82fb1c857fb28), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCell{},R} (
      LblinitGeneratedTopCell{}(X0:SortMap{}),
     \and{SortGeneratedTopCell{}} (
       Lbl'-LT-'generatedTop'-GT-'{}(LblinitTCell{}(VarInit:SortMap{}),LblinitGeneratedCounterCell{}()),
        \top{SortGeneratedTopCell{}}())))
  [UNIQUE'Unds'ID{}("6bc7582a7d8c6574a248b085ad3bdecafbf86539963d4e752be82fb1c857fb28")]

// rule initKCell(Init)=>`<k>`(inj{Program,KItem}(`project:Program`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$PGM","KConfigVar")))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3f456a60337067013f63e2f590f1c1dcf30800d1fabf722c5d0973f3e7fdfdf1), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortKCell{},R} (
      LblinitKCell{}(X0:SortMap{}),
     \and{SortKCell{}} (
       Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortProgram{}, SortKItem{}}(Lblproject'Coln'Program{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$PGM"))),dotk{}()))),dotk{}())),
        \top{SortKCell{}}())))
  [UNIQUE'Unds'ID{}("3f456a60337067013f63e2f590f1c1dcf30800d1fabf722c5d0973f3e7fdfdf1")]

// rule initStateCell(.KList)=>`<state>`(initVariablesCell(.KList),initTransitionsCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5d6f41bd1e92c0ac18ba037f346a53c753cfc3080c562286c333a766cef90caa), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortStateCell{},R} (
      LblinitStateCell{}(),
     \and{SortStateCell{}} (
       Lbl'-LT-'state'-GT-'{}(LblinitVariablesCell{}(),LblinitTransitionsCell{}()),
        \top{SortStateCell{}}())))
  [UNIQUE'Unds'ID{}("5d6f41bd1e92c0ac18ba037f346a53c753cfc3080c562286c333a766cef90caa")]

// rule initTCell(Init)=>`<T>`(initKCell(Init),initStateCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(082e738743e54caf1b2a3e9be1aa464283ccaca4c3a7d07813904226676400bf), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortTCell{},R} (
      LblinitTCell{}(X0:SortMap{}),
     \and{SortTCell{}} (
       Lbl'-LT-'T'-GT-'{}(LblinitKCell{}(VarInit:SortMap{}),LblinitStateCell{}()),
        \top{SortTCell{}}())))
  [UNIQUE'Unds'ID{}("082e738743e54caf1b2a3e9be1aa464283ccaca4c3a7d07813904226676400bf")]

// rule initTransitionsCell(.KList)=>`<transitions>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ae770a8bf017d4e51e07b3f798a061a6aea81e93414660b4860ee90d4f92cf6a), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortTransitionsCell{},R} (
      LblinitTransitionsCell{}(),
     \and{SortTransitionsCell{}} (
       Lbl'-LT-'transitions'-GT-'{}(Lbl'Stop'List{}()),
        \top{SortTransitionsCell{}}())))
  [UNIQUE'Unds'ID{}("ae770a8bf017d4e51e07b3f798a061a6aea81e93414660b4860ee90d4f92cf6a")]

// rule initVariablesCell(.KList)=>`<variables>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(878bdabc33db6c1f2be2958713135da8882bc92dc231c1de92753af470c9992d), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortVariablesCell{},R} (
      LblinitVariablesCell{}(),
     \and{SortVariablesCell{}} (
       Lbl'-LT-'variables'-GT-'{}(Lbl'Stop'Map{}()),
        \top{SortVariablesCell{}}())))
  [UNIQUE'Unds'ID{}("878bdabc33db6c1f2be2958713135da8882bc92dc231c1de92753af470c9992d")]

// rule isAssignment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(06105d9991520b84d5385cb385f9e21247421d97be82354565d8370b47107bf0), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortAssignment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortAssignment{}, SortKItem{}}(Var'Unds'Gen1:SortAssignment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisAssignment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("06105d9991520b84d5385cb385f9e21247421d97be82354565d8370b47107bf0"), owise{}()]

// rule isAssignment(inj{Assignment,KItem}(Assignment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(50bbc188c15c716b059e6a0829a3fd71572e7c723affcd577385f15974ad4d27)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortAssignment{}, SortKItem{}}(VarAssignment:SortAssignment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisAssignment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("50bbc188c15c716b059e6a0829a3fd71572e7c723affcd577385f15974ad4d27")]

// rule isAssumption(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e5de79cb64f23a61f6fd0df2a6604ce4bd55aeaf51c2dd0b0114cb8d720cf376), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortAssumption{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortAssumption{}, SortKItem{}}(Var'Unds'Gen0:SortAssumption{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisAssumption{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("e5de79cb64f23a61f6fd0df2a6604ce4bd55aeaf51c2dd0b0114cb8d720cf376"), owise{}()]

// rule isAssumption(inj{Assumption,KItem}(Assumption))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(92a2cef7bbb0dcd0a9715c716e370fd7eb5ed5d2d302892c4884ce18e59daeb3)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortAssumption{}, SortKItem{}}(VarAssumption:SortAssumption{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisAssumption{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("92a2cef7bbb0dcd0a9715c716e370fd7eb5ed5d2d302892c4884ce18e59daeb3")]

// rule isBool(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(495da551d13b205c8648618471ccfca028707f98eff21e6b11d591515ed6f29a), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortBool{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortBool{}, SortKItem{}}(Var'Unds'Gen0:SortBool{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisBool{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("495da551d13b205c8648618471ccfca028707f98eff21e6b11d591515ed6f29a"), owise{}()]

// rule isBool(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(dadad716b2f6a82fa4b2cc8f903a1b8f1f6e8cfa63f18b72a7cb35110bdcff77)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisBool{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("dadad716b2f6a82fa4b2cc8f903a1b8f1f6e8cfa63f18b72a7cb35110bdcff77")]

// rule isChoice(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1428f668773eddb5a8c1457e202fa10a4179c96262e9b75ffabee03b7e421369), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortChoice{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortChoice{}, SortKItem{}}(Var'Unds'Gen0:SortChoice{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisChoice{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("1428f668773eddb5a8c1457e202fa10a4179c96262e9b75ffabee03b7e421369"), owise{}()]

// rule isChoice(inj{Choice,KItem}(Choice))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(46047930d0f9d2716f59d4621bccc5b67512d9599c23ba58ea04e4b2545c8687)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortChoice{}, SortKItem{}}(VarChoice:SortChoice{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisChoice{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("46047930d0f9d2716f59d4621bccc5b67512d9599c23ba58ea04e4b2545c8687")]

// rule isChoiceOrBlock(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(73dcc86559c4e2beb75289015f9b9d1bdf98fcfce950b56bb7a8de180f24378b), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortChoiceOrBlock{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortChoiceOrBlock{}, SortKItem{}}(Var'Unds'Gen1:SortChoiceOrBlock{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisChoiceOrBlock{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("73dcc86559c4e2beb75289015f9b9d1bdf98fcfce950b56bb7a8de180f24378b"), owise{}()]

// rule isChoiceOrBlock(inj{ChoiceOrBlock,KItem}(ChoiceOrBlock))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a30958046aa6fd84261087a043e3ab0e1778c4ba0f67c1c928e8652bbcf9a3f2)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortChoiceOrBlock{}, SortKItem{}}(VarChoiceOrBlock:SortChoiceOrBlock{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisChoiceOrBlock{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("a30958046aa6fd84261087a043e3ab0e1778c4ba0f67c1c928e8652bbcf9a3f2")]

// rule isChoiceOrBlocks(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1c56b68a51217af37c280c4c43d4f5e57997364288a8ce114fe1c685203d084b), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortChoiceOrBlocks{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortChoiceOrBlocks{}, SortKItem{}}(Var'Unds'Gen0:SortChoiceOrBlocks{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisChoiceOrBlocks{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("1c56b68a51217af37c280c4c43d4f5e57997364288a8ce114fe1c685203d084b"), owise{}()]

// rule isChoiceOrBlocks(inj{ChoiceOrBlocks,KItem}(ChoiceOrBlocks))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(842d8e591965abfd4371d83b07d1d1d74328649cbd9acd2c40c582891c4c25a4)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortChoiceOrBlocks{}, SortKItem{}}(VarChoiceOrBlocks:SortChoiceOrBlocks{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisChoiceOrBlocks{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("842d8e591965abfd4371d83b07d1d1d74328649cbd9acd2c40c582891c4c25a4")]

// rule isGeneratedCounterCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b0c8eb86594a387398bf96f2dbf773cff29d14b8a45c5f6701f205bf3d2f33ba), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortGeneratedCounterCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(Var'Unds'Gen1:SortGeneratedCounterCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("b0c8eb86594a387398bf96f2dbf773cff29d14b8a45c5f6701f205bf3d2f33ba"), owise{}()]

// rule isGeneratedCounterCell(inj{GeneratedCounterCell,KItem}(GeneratedCounterCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f7b6a3dbee5a80d5eeba727f40009876995660d4052a45fc50c55f88c5fc1a7c)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarGeneratedCounterCell:SortGeneratedCounterCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f7b6a3dbee5a80d5eeba727f40009876995660d4052a45fc50c55f88c5fc1a7c")]

// rule isGeneratedCounterCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(84cfc8e964ec28b1912ffec4e6f5fccfcbad2256a1cba113622d99b11c13afd6), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortGeneratedCounterCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(Var'Unds'Gen0:SortGeneratedCounterCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("84cfc8e964ec28b1912ffec4e6f5fccfcbad2256a1cba113622d99b11c13afd6"), owise{}()]

// rule isGeneratedCounterCellOpt(inj{GeneratedCounterCellOpt,KItem}(GeneratedCounterCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a4ff3e170677e099d4b28085658942cb10fcf871aa99abcdf73927596c180f12)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(VarGeneratedCounterCellOpt:SortGeneratedCounterCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("a4ff3e170677e099d4b28085658942cb10fcf871aa99abcdf73927596c180f12")]

// rule isGeneratedTopCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ccb9226d9e6c0e476485f098ef162c6c2206ed3af1d8336ea3ae859b86bc4a8b), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortGeneratedTopCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(Var'Unds'Gen1:SortGeneratedTopCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("ccb9226d9e6c0e476485f098ef162c6c2206ed3af1d8336ea3ae859b86bc4a8b"), owise{}()]

// rule isGeneratedTopCell(inj{GeneratedTopCell,KItem}(GeneratedTopCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3bcf423225700e329d0533cfd806eb9bab91f9d8de0979c8d8e381fe5d076bb2)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarGeneratedTopCell:SortGeneratedTopCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("3bcf423225700e329d0533cfd806eb9bab91f9d8de0979c8d8e381fe5d076bb2")]

// rule isGeneratedTopCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(98049f5819962c7ee2b01436957b6cf8460b106979fa2c24f4c606bbf6cb1592), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortGeneratedTopCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(Var'Unds'Gen1:SortGeneratedTopCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("98049f5819962c7ee2b01436957b6cf8460b106979fa2c24f4c606bbf6cb1592"), owise{}()]

// rule isGeneratedTopCellFragment(inj{GeneratedTopCellFragment,KItem}(GeneratedTopCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(559f2cdc0ab425bb065cc3174f4a1af4d9ca834f762a814cf3dfbf9a9d7f8271)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarGeneratedTopCellFragment:SortGeneratedTopCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("559f2cdc0ab425bb065cc3174f4a1af4d9ca834f762a814cf3dfbf9a9d7f8271")]

// rule isHavoc(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f8ef1aa4079a2cfdede36a4c2042a8fbb1441e1478da0e75b17773c24fbcc039), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortHavoc{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortHavoc{}, SortKItem{}}(Var'Unds'Gen1:SortHavoc{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisHavoc{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f8ef1aa4079a2cfdede36a4c2042a8fbb1441e1478da0e75b17773c24fbcc039"), owise{}()]

// rule isHavoc(inj{Havoc,KItem}(Havoc))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(96ec27df3ea12f0cccb778c0da731e787dd5e758c1bed5bb014bc378d7c45b50)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortHavoc{}, SortKItem{}}(VarHavoc:SortHavoc{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisHavoc{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("96ec27df3ea12f0cccb778c0da731e787dd5e758c1bed5bb014bc378d7c45b50")]

// rule isId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f37abe49c9a4ee52b56a492679d7aab25802b3c05860fee32a4a09d72b2a322f), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortId{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortId{}, SortKItem{}}(Var'Unds'Gen1:SortId{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisId{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f37abe49c9a4ee52b56a492679d7aab25802b3c05860fee32a4a09d72b2a322f"), owise{}()]

// rule isId(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f024b5fa3f428dab8c832862d8a13219a64369be25641326400611b32ae8843d)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisId{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f024b5fa3f428dab8c832862d8a13219a64369be25641326400611b32ae8843d")]

// rule isInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(105572a4ac107eeb518b37c4d6ed3e28732b83afb0ba085d02d339c4fc2140a0), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortInt{}, SortKItem{}}(Var'Unds'Gen0:SortInt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("105572a4ac107eeb518b37c4d6ed3e28732b83afb0ba085d02d339c4fc2140a0"), owise{}()]

// rule isInt(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(92664aa821c8898ff16b4e72ad0bdf363f755c7660d28dcb69c129a2c94bc6b5)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("92664aa821c8898ff16b4e72ad0bdf363f755c7660d28dcb69c129a2c94bc6b5")]

// rule isK(K)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(16ff77cff0ef50026a8b3f4614b87bda465701918596b7ad2280baffff56f847)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisK{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("16ff77cff0ef50026a8b3f4614b87bda465701918596b7ad2280baffff56f847")]

// rule isKCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d30be57718b4b3745eaf2e99f875cfec7d5be2ff76bacde8a89bd4ab659d857f), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortKCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKCell{}, SortKItem{}}(Var'Unds'Gen0:SortKCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("d30be57718b4b3745eaf2e99f875cfec7d5be2ff76bacde8a89bd4ab659d857f"), owise{}()]

// rule isKCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2695222b1238f711f8a356c0a1bc0ac418d7bd78fd3282e7c60882e2631a46df)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("2695222b1238f711f8a356c0a1bc0ac418d7bd78fd3282e7c60882e2631a46df")]

// rule isKCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a3f84195242c98b432c7c63a4189f4276cc3189445c5cf37ce08d9a6547b1f7), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortKCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortKCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("9a3f84195242c98b432c7c63a4189f4276cc3189445c5cf37ce08d9a6547b1f7"), owise{}()]

// rule isKCellOpt(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1516473b1e153a368c273997543a4378ad451e5e828db8e289f4447f7e5228a5)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("1516473b1e153a368c273997543a4378ad451e5e828db8e289f4447f7e5228a5")]

// rule isKConfigVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f68a616e301c35586f68e97b729ae274278c3ef8fe6634711cfd3e1746bc0bc2), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortKConfigVar{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKConfigVar{}, SortKItem{}}(Var'Unds'Gen1:SortKConfigVar{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKConfigVar{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f68a616e301c35586f68e97b729ae274278c3ef8fe6634711cfd3e1746bc0bc2"), owise{}()]

// rule isKConfigVar(inj{KConfigVar,KItem}(KConfigVar))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0ef0a00bb321f2c2a62a3239327de70ecb8e907a950cd20034c46b84e040ebcd)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKConfigVar{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("0ef0a00bb321f2c2a62a3239327de70ecb8e907a950cd20034c46b84e040ebcd")]

// rule isKItem(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(83812b6b9e31a764d66d89fd1c7e65b9b162d52c5aebfe99b1536e200a9590c2), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortKItem{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(Var'Unds'Gen0:SortKItem{},dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKItem{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("83812b6b9e31a764d66d89fd1c7e65b9b162d52c5aebfe99b1536e200a9590c2"), owise{}()]

// rule isKItem(KItem)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ed3c25a7dab5e5fbc101589e2fa74ac91aa107f051d22a01378222d08643373c)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(VarKItem:SortKItem{},dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKItem{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("ed3c25a7dab5e5fbc101589e2fa74ac91aa107f051d22a01378222d08643373c")]

// rule isLine(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f42634ce208e1a00ad87700dfb601844e3d06aacfad6262cb866f6e167e892bb), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortLine{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortLine{}, SortKItem{}}(Var'Unds'Gen1:SortLine{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisLine{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f42634ce208e1a00ad87700dfb601844e3d06aacfad6262cb866f6e167e892bb"), owise{}()]

// rule isLine(inj{Line,KItem}(Line))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(63a3e98b9e24d05019ddd219e013950c4ca639d37ddb16637b4f768536139675)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortLine{}, SortKItem{}}(VarLine:SortLine{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisLine{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("63a3e98b9e24d05019ddd219e013950c4ca639d37ddb16637b4f768536139675")]

// rule isList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a9489adcf0279eca74c012bb1130bb9d30372cfbebc8e4ab4b173656c4d6613), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortList{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortList{}, SortKItem{}}(Var'Unds'Gen1:SortList{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisList{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("9a9489adcf0279eca74c012bb1130bb9d30372cfbebc8e4ab4b173656c4d6613"), owise{}()]

// rule isList(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7d4dddf5bbdb61cfd11fb9be1071be7bd551cf186607cf6f493cfade3221c446)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisList{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("7d4dddf5bbdb61cfd11fb9be1071be7bd551cf186607cf6f493cfade3221c446")]

// rule isLiteral(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7caaa8b725ed27da6067ebbb17236edf1d53f30826c93aa1326b53f1b96674c8), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortLiteral{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortLiteral{}, SortKItem{}}(Var'Unds'Gen1:SortLiteral{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisLiteral{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("7caaa8b725ed27da6067ebbb17236edf1d53f30826c93aa1326b53f1b96674c8"), owise{}()]

// rule isLiteral(inj{Literal,KItem}(Literal))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2fdb69e3f25cb0f7f12a6d7e07229ba4827a6e7eaf6da7d2d01420c2a83c1eac)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortLiteral{}, SortKItem{}}(VarLiteral:SortLiteral{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisLiteral{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("2fdb69e3f25cb0f7f12a6d7e07229ba4827a6e7eaf6da7d2d01420c2a83c1eac")]

// rule isMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6f30a2087d0b19640df005437bc3f4665f41282666a72821b17b16c99ed5afee), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortMap{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortMap{}, SortKItem{}}(Var'Unds'Gen1:SortMap{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("6f30a2087d0b19640df005437bc3f4665f41282666a72821b17b16c99ed5afee"), owise{}()]

// rule isMap(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4879c0fcf6b7d7f3d6b751e4f460f8dced005a44ae5ff600cffcea784cf58795)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("4879c0fcf6b7d7f3d6b751e4f460f8dced005a44ae5ff600cffcea784cf58795")]

// rule isOperation(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9610477f829b930b6db17efe279fcea0c5784013e68ea30f23d629e9020ac56a), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortOperation{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortOperation{}, SortKItem{}}(Var'Unds'Gen0:SortOperation{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisOperation{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("9610477f829b930b6db17efe279fcea0c5784013e68ea30f23d629e9020ac56a"), owise{}()]

// rule isOperation(inj{Operation,KItem}(Operation))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(66806921e9726d1b97fdc6270eb5d3acb3edc1c72590de0ae19e1924199159b2)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOperation{}, SortKItem{}}(VarOperation:SortOperation{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisOperation{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("66806921e9726d1b97fdc6270eb5d3acb3edc1c72590de0ae19e1924199159b2")]

// rule isProgram(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(17987f1ba60eb13c6487ebeccdc1602e4515927f186634b947643453bfdf5ba6), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortProgram{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortProgram{}, SortKItem{}}(Var'Unds'Gen1:SortProgram{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisProgram{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("17987f1ba60eb13c6487ebeccdc1602e4515927f186634b947643453bfdf5ba6"), owise{}()]

// rule isProgram(inj{Program,KItem}(Program))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a13cffc00164d293194c6d21dc969111aaf05d04733535a24bd727e70668d52e)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortProgram{}, SortKItem{}}(VarProgram:SortProgram{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisProgram{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("a13cffc00164d293194c6d21dc969111aaf05d04733535a24bd727e70668d52e")]

// rule isSequence(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(915fbc090f5ad405267ca22fa9b5367779ff736b414323f3f783aef3afd8e15c), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortSequence{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortSequence{}, SortKItem{}}(Var'Unds'Gen0:SortSequence{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisSequence{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("915fbc090f5ad405267ca22fa9b5367779ff736b414323f3f783aef3afd8e15c"), owise{}()]

// rule isSequence(inj{Sequence,KItem}(Sequence))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(aab5b96c84673871f157a2ee08b2cd9ed220ef26639f1b0664d2b8b47c382e9f)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortSequence{}, SortKItem{}}(VarSequence:SortSequence{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisSequence{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("aab5b96c84673871f157a2ee08b2cd9ed220ef26639f1b0664d2b8b47c382e9f")]

// rule isSet(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2b5aadccd9b89faba72816867187d48d279d8c27c8bda1a1b3b0658bd82bb783), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortSet{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortSet{}, SortKItem{}}(Var'Unds'Gen1:SortSet{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisSet{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("2b5aadccd9b89faba72816867187d48d279d8c27c8bda1a1b3b0658bd82bb783"), owise{}()]

// rule isSet(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f205bc460bdb728b4c3458643699be30d519db4d8b13e80e2c27082b9e846e80)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisSet{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f205bc460bdb728b4c3458643699be30d519db4d8b13e80e2c27082b9e846e80")]

// rule isStateCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b0e69b47868d7006abcecd9821496d91b1cbed0dc497e01577e9ddadc87c627), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortStateCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStateCell{}, SortKItem{}}(Var'Unds'Gen0:SortStateCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStateCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("5b0e69b47868d7006abcecd9821496d91b1cbed0dc497e01577e9ddadc87c627"), owise{}()]

// rule isStateCell(inj{StateCell,KItem}(StateCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(66256807bfe91d1d029a3ae94eafa088f1c65a7a764ca8875a5427f9532df462)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStateCell{}, SortKItem{}}(VarStateCell:SortStateCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStateCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("66256807bfe91d1d029a3ae94eafa088f1c65a7a764ca8875a5427f9532df462")]

// rule isStateCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f85be83c8ecacc855daf4eb723942681f31cc05a7ecfd01ad85bce8529d0863f), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortStateCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStateCellFragment{}, SortKItem{}}(Var'Unds'Gen0:SortStateCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStateCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f85be83c8ecacc855daf4eb723942681f31cc05a7ecfd01ad85bce8529d0863f"), owise{}()]

// rule isStateCellFragment(inj{StateCellFragment,KItem}(StateCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(39e0ddbb15d33001ad61e2269400354694aed01454f02b8f161c9916fa811268)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStateCellFragment{}, SortKItem{}}(VarStateCellFragment:SortStateCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStateCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("39e0ddbb15d33001ad61e2269400354694aed01454f02b8f161c9916fa811268")]

// rule isStateCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(02f93e87877a1bfec39c549cdb6aa1dfeb107c88e2ea5ded312498fb690eff61), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortStateCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(Var'Unds'Gen0:SortStateCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStateCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("02f93e87877a1bfec39c549cdb6aa1dfeb107c88e2ea5ded312498fb690eff61"), owise{}()]

// rule isStateCellOpt(inj{StateCellOpt,KItem}(StateCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b5285b2b23133d428fcb21af02d523dec10d3660f0f43d59933927d0ee79471e)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarStateCellOpt:SortStateCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStateCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("b5285b2b23133d428fcb21af02d523dec10d3660f0f43d59933927d0ee79471e")]

// rule isTCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(550b3cc25922848b7174df3ee5d34bc31b7772daa1579d20e37b3c0d6c7a961d), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortTCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTCell{}, SortKItem{}}(Var'Unds'Gen1:SortTCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("550b3cc25922848b7174df3ee5d34bc31b7772daa1579d20e37b3c0d6c7a961d"), owise{}()]

// rule isTCell(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0b19c6d63df1e9cd6abc786c6c34fbd1b1f97cae6bf9fdba7b1275a02bd51205)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("0b19c6d63df1e9cd6abc786c6c34fbd1b1f97cae6bf9fdba7b1275a02bd51205")]

// rule isTCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(704d5df7c717193a67d91aad6774acb5eb9fe2137515d5204768bf499f92270b), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortTCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTCellFragment{}, SortKItem{}}(Var'Unds'Gen1:SortTCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("704d5df7c717193a67d91aad6774acb5eb9fe2137515d5204768bf499f92270b"), owise{}()]

// rule isTCellFragment(inj{TCellFragment,KItem}(TCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f1c94b538b3ecdc44697da9f227c0650540c8f233c5dba13f94071522c756c76)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f1c94b538b3ecdc44697da9f227c0650540c8f233c5dba13f94071522c756c76")]

// rule isTCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3a11be25d71bcfe67274e7f5c5091d99dc524b8bc5a8ac8fe6c101e58c1895ca), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortTCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortTCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("3a11be25d71bcfe67274e7f5c5091d99dc524b8bc5a8ac8fe6c101e58c1895ca"), owise{}()]

// rule isTCellOpt(inj{TCellOpt,KItem}(TCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2d9e2efc934a1108a68dec355c0ce9420ec8c2292a856744f5d9014a10f5888c)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCellOpt{}, SortKItem{}}(VarTCellOpt:SortTCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("2d9e2efc934a1108a68dec355c0ce9420ec8c2292a856744f5d9014a10f5888c")]

// rule isTransition(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(da519c21c94bc2ef1dbe429a40d7b5b75d1d4bb422c477006a2e15f7355816d1), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortTransition{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTransition{}, SortKItem{}}(Var'Unds'Gen0:SortTransition{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTransition{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("da519c21c94bc2ef1dbe429a40d7b5b75d1d4bb422c477006a2e15f7355816d1"), owise{}()]

// rule isTransition(inj{Transition,KItem}(Transition))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5fd11a1c2ff000629d43cccbab6110712e09f0b555328d9a9b342229ca447fd1)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTransition{}, SortKItem{}}(VarTransition:SortTransition{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTransition{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("5fd11a1c2ff000629d43cccbab6110712e09f0b555328d9a9b342229ca447fd1")]

// rule isTransitionsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(de683589f7ba26e98a9a25823c02edbd423afdaf723d64e74494750fb1b138bd), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortTransitionsCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTransitionsCell{}, SortKItem{}}(Var'Unds'Gen0:SortTransitionsCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTransitionsCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("de683589f7ba26e98a9a25823c02edbd423afdaf723d64e74494750fb1b138bd"), owise{}()]

// rule isTransitionsCell(inj{TransitionsCell,KItem}(TransitionsCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(667b1710518a00e5306a5e47da5e1303197a02e5cbf3e35bc1acd0a935bf5af3)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTransitionsCell{}, SortKItem{}}(VarTransitionsCell:SortTransitionsCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTransitionsCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("667b1710518a00e5306a5e47da5e1303197a02e5cbf3e35bc1acd0a935bf5af3")]

// rule isTransitionsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1eb305c0aff6a98ef31ac272392a8f5a9c8554379e6fd30e55f27a4340bb2bd1), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortTransitionsCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTransitionsCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortTransitionsCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTransitionsCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("1eb305c0aff6a98ef31ac272392a8f5a9c8554379e6fd30e55f27a4340bb2bd1"), owise{}()]

// rule isTransitionsCellOpt(inj{TransitionsCellOpt,KItem}(TransitionsCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(294b81c7287faea90bbdaefd88c5e5570313f780253718de765fc57dbef62643)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTransitionsCellOpt{}, SortKItem{}}(VarTransitionsCellOpt:SortTransitionsCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTransitionsCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("294b81c7287faea90bbdaefd88c5e5570313f780253718de765fc57dbef62643")]

// rule isVariableDeclaration(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a9a4923e71843205f1c4698147acff3002174bfedeca6dba26023afd14927570), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortVariableDeclaration{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortVariableDeclaration{}, SortKItem{}}(Var'Unds'Gen1:SortVariableDeclaration{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisVariableDeclaration{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("a9a4923e71843205f1c4698147acff3002174bfedeca6dba26023afd14927570"), owise{}()]

// rule isVariableDeclaration(inj{VariableDeclaration,KItem}(VariableDeclaration))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(000d1814c0748e85090a95a16818ba839bee7a341a8ebeedd03394bd0048cb8f)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortVariableDeclaration{}, SortKItem{}}(VarVariableDeclaration:SortVariableDeclaration{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisVariableDeclaration{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("000d1814c0748e85090a95a16818ba839bee7a341a8ebeedd03394bd0048cb8f")]

// rule isVariablesCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(21e9959d3217cfcd4aaa34c7f43fc6f5ad462e51e9cef1fcaf6d753a2885eaf1), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortVariablesCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortVariablesCell{}, SortKItem{}}(Var'Unds'Gen1:SortVariablesCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisVariablesCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("21e9959d3217cfcd4aaa34c7f43fc6f5ad462e51e9cef1fcaf6d753a2885eaf1"), owise{}()]

// rule isVariablesCell(inj{VariablesCell,KItem}(VariablesCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f6e555c61390f43c4b44b4bc140ace66bdde1d724fc02565289fcd60439f5ef7)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortVariablesCell{}, SortKItem{}}(VarVariablesCell:SortVariablesCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisVariablesCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("f6e555c61390f43c4b44b4bc140ace66bdde1d724fc02565289fcd60439f5ef7")]

// rule isVariablesCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ea909e8f57b24b22f9181aa35eb40e36eee6f15df2df65e32157155e9d0fc768), owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortVariablesCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortVariablesCellOpt{}, SortKItem{}}(Var'Unds'Gen0:SortVariablesCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisVariablesCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("ea909e8f57b24b22f9181aa35eb40e36eee6f15df2df65e32157155e9d0fc768"), owise{}()]

// rule isVariablesCellOpt(inj{VariablesCellOpt,KItem}(VariablesCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4ec42a2641a8819b41ed6128b667dbf8b5c7d60264530e185af7403edb98994e)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortVariablesCellOpt{}, SortKItem{}}(VarVariablesCellOpt:SortVariablesCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisVariablesCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("4ec42a2641a8819b41ed6128b667dbf8b5c7d60264530e185af7403edb98994e")]

// rule `project:Assignment`(inj{Assignment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(afe5633b5e6dd0c2ac21a87ebde0ee6f999a071587e47b524535544e28102bce), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortAssignment{}, SortKItem{}}(VarK:SortAssignment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortAssignment{},R} (
      Lblproject'Coln'Assignment{}(X0:SortK{}),
     \and{SortAssignment{}} (
       VarK:SortAssignment{},
        \top{SortAssignment{}}())))
  [UNIQUE'Unds'ID{}("afe5633b5e6dd0c2ac21a87ebde0ee6f999a071587e47b524535544e28102bce")]

// rule `project:Assumption`(inj{Assumption,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(49b4085523ff9ad2acc9db6d63b3c750c944e02b961a147f67107a6eafd05fac), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortAssumption{}, SortKItem{}}(VarK:SortAssumption{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortAssumption{},R} (
      Lblproject'Coln'Assumption{}(X0:SortK{}),
     \and{SortAssumption{}} (
       VarK:SortAssumption{},
        \top{SortAssumption{}}())))
  [UNIQUE'Unds'ID{}("49b4085523ff9ad2acc9db6d63b3c750c944e02b961a147f67107a6eafd05fac")]

// rule `project:Bool`(inj{Bool,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5872f0d5b8131216db7bc41e2c3a423e55f4b8581589fcbd1bf93b2ca6862d54), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBool{}, SortKItem{}}(VarK:SortBool{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      Lblproject'Coln'Bool{}(X0:SortK{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [UNIQUE'Unds'ID{}("5872f0d5b8131216db7bc41e2c3a423e55f4b8581589fcbd1bf93b2ca6862d54")]

// rule `project:Choice`(inj{Choice,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(30b5068d45e67d53455ab52fee0c07d035415c1c94faf5e37b0abdbcad1f7400), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortChoice{}, SortKItem{}}(VarK:SortChoice{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortChoice{},R} (
      Lblproject'Coln'Choice{}(X0:SortK{}),
     \and{SortChoice{}} (
       VarK:SortChoice{},
        \top{SortChoice{}}())))
  [UNIQUE'Unds'ID{}("30b5068d45e67d53455ab52fee0c07d035415c1c94faf5e37b0abdbcad1f7400")]

// rule `project:ChoiceOrBlock`(inj{ChoiceOrBlock,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e5abbaaaf0da1dc8c635ff7121311867f1136b808118fff5abecaa665c0b90d6), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortChoiceOrBlock{}, SortKItem{}}(VarK:SortChoiceOrBlock{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortChoiceOrBlock{},R} (
      Lblproject'Coln'ChoiceOrBlock{}(X0:SortK{}),
     \and{SortChoiceOrBlock{}} (
       VarK:SortChoiceOrBlock{},
        \top{SortChoiceOrBlock{}}())))
  [UNIQUE'Unds'ID{}("e5abbaaaf0da1dc8c635ff7121311867f1136b808118fff5abecaa665c0b90d6")]

// rule `project:ChoiceOrBlocks`(inj{ChoiceOrBlocks,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f84073efe106aaf72c63227ca458189936b28b9778846b7d94ad037003cfc41b), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortChoiceOrBlocks{}, SortKItem{}}(VarK:SortChoiceOrBlocks{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortChoiceOrBlocks{},R} (
      Lblproject'Coln'ChoiceOrBlocks{}(X0:SortK{}),
     \and{SortChoiceOrBlocks{}} (
       VarK:SortChoiceOrBlocks{},
        \top{SortChoiceOrBlocks{}}())))
  [UNIQUE'Unds'ID{}("f84073efe106aaf72c63227ca458189936b28b9778846b7d94ad037003cfc41b")]

// rule `project:GeneratedCounterCell`(inj{GeneratedCounterCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(63453db9d9aa121b63bb877e2fa4998d399ef82d2a1e4b90f87a32ba55401217), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarK:SortGeneratedCounterCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedCounterCell{},R} (
      Lblproject'Coln'GeneratedCounterCell{}(X0:SortK{}),
     \and{SortGeneratedCounterCell{}} (
       VarK:SortGeneratedCounterCell{},
        \top{SortGeneratedCounterCell{}}())))
  [UNIQUE'Unds'ID{}("63453db9d9aa121b63bb877e2fa4998d399ef82d2a1e4b90f87a32ba55401217")]

// rule `project:GeneratedCounterCellOpt`(inj{GeneratedCounterCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9325a900267ae528f7cd09f3b44b825dd9ff344c38d38383c08fa697cc67efca), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(VarK:SortGeneratedCounterCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedCounterCellOpt{},R} (
      Lblproject'Coln'GeneratedCounterCellOpt{}(X0:SortK{}),
     \and{SortGeneratedCounterCellOpt{}} (
       VarK:SortGeneratedCounterCellOpt{},
        \top{SortGeneratedCounterCellOpt{}}())))
  [UNIQUE'Unds'ID{}("9325a900267ae528f7cd09f3b44b825dd9ff344c38d38383c08fa697cc67efca")]

// rule `project:GeneratedTopCell`(inj{GeneratedTopCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b0fabd8c7c81fe08ebd569aff59747d357e441ae1fcd05d9d594d57e38e3d55e), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarK:SortGeneratedTopCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCell{},R} (
      Lblproject'Coln'GeneratedTopCell{}(X0:SortK{}),
     \and{SortGeneratedTopCell{}} (
       VarK:SortGeneratedTopCell{},
        \top{SortGeneratedTopCell{}}())))
  [UNIQUE'Unds'ID{}("b0fabd8c7c81fe08ebd569aff59747d357e441ae1fcd05d9d594d57e38e3d55e")]

// rule `project:GeneratedTopCellFragment`(inj{GeneratedTopCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2084fac322aa142a07f881814b8a286bf62d5c6d05777b7aa715ccc534cf9a42), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarK:SortGeneratedTopCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCellFragment{},R} (
      Lblproject'Coln'GeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortGeneratedTopCellFragment{}} (
       VarK:SortGeneratedTopCellFragment{},
        \top{SortGeneratedTopCellFragment{}}())))
  [UNIQUE'Unds'ID{}("2084fac322aa142a07f881814b8a286bf62d5c6d05777b7aa715ccc534cf9a42")]

// rule `project:Havoc`(inj{Havoc,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(770caa8abbba10188a3f9d2d1fc384195b85d5d844b72431ce564f7156cf7630), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortHavoc{}, SortKItem{}}(VarK:SortHavoc{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortHavoc{},R} (
      Lblproject'Coln'Havoc{}(X0:SortK{}),
     \and{SortHavoc{}} (
       VarK:SortHavoc{},
        \top{SortHavoc{}}())))
  [UNIQUE'Unds'ID{}("770caa8abbba10188a3f9d2d1fc384195b85d5d844b72431ce564f7156cf7630")]

// rule `project:Id`(inj{Id,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(afcb3941b7c18d4b91d6ed8981582d58e0dc006425e9889e9891c2a7c2b93554), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortId{}, SortKItem{}}(VarK:SortId{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortId{},R} (
      Lblproject'Coln'Id{}(X0:SortK{}),
     \and{SortId{}} (
       VarK:SortId{},
        \top{SortId{}}())))
  [UNIQUE'Unds'ID{}("afcb3941b7c18d4b91d6ed8981582d58e0dc006425e9889e9891c2a7c2b93554")]

// rule `project:Int`(inj{Int,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f316b871091516c401f1d2382cc5f66322602b782c7b01e1aeb6c2ddab50e24b), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInt{}, SortKItem{}}(VarK:SortInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      Lblproject'Coln'Int{}(X0:SortK{}),
     \and{SortInt{}} (
       VarK:SortInt{},
        \top{SortInt{}}())))
  [UNIQUE'Unds'ID{}("f316b871091516c401f1d2382cc5f66322602b782c7b01e1aeb6c2ddab50e24b")]

// rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(25b529ddcefd25ef63f99a62040145ef27638e7679ea9202218fe14be98dff3a), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )),
    \equals{SortK{},R} (
      Lblproject'Coln'K{}(X0:SortK{}),
     \and{SortK{}} (
       VarK:SortK{},
        \top{SortK{}}())))
  [UNIQUE'Unds'ID{}("25b529ddcefd25ef63f99a62040145ef27638e7679ea9202218fe14be98dff3a")]

// rule `project:KCell`(inj{KCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(894c13c4c410f11e35bc3781505aeddde4ff400ddda1daf8b35259dbf0de9a24), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCell{}, SortKItem{}}(VarK:SortKCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKCell{},R} (
      Lblproject'Coln'KCell{}(X0:SortK{}),
     \and{SortKCell{}} (
       VarK:SortKCell{},
        \top{SortKCell{}}())))
  [UNIQUE'Unds'ID{}("894c13c4c410f11e35bc3781505aeddde4ff400ddda1daf8b35259dbf0de9a24")]

// rule `project:KCellOpt`(inj{KCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f684dd78d97feadf0cbcb3cbb8892e0842f137c7b29a904cb2f3fc9755b29b30), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarK:SortKCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKCellOpt{},R} (
      Lblproject'Coln'KCellOpt{}(X0:SortK{}),
     \and{SortKCellOpt{}} (
       VarK:SortKCellOpt{},
        \top{SortKCellOpt{}}())))
  [UNIQUE'Unds'ID{}("f684dd78d97feadf0cbcb3cbb8892e0842f137c7b29a904cb2f3fc9755b29b30")]

// rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1242e49c17638c9a66a35e3bb8c237288f7e9aa9a6499101e8cdc55be320cd29), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(VarK:SortKItem{},dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKItem{},R} (
      Lblproject'Coln'KItem{}(X0:SortK{}),
     \and{SortKItem{}} (
       VarK:SortKItem{},
        \top{SortKItem{}}())))
  [UNIQUE'Unds'ID{}("1242e49c17638c9a66a35e3bb8c237288f7e9aa9a6499101e8cdc55be320cd29")]

// rule `project:Line`(inj{Line,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cebb042ff30288031461bb4f6f797790f213384e9fc36e371f7f703228f912f2), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortLine{}, SortKItem{}}(VarK:SortLine{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortLine{},R} (
      Lblproject'Coln'Line{}(X0:SortK{}),
     \and{SortLine{}} (
       VarK:SortLine{},
        \top{SortLine{}}())))
  [UNIQUE'Unds'ID{}("cebb042ff30288031461bb4f6f797790f213384e9fc36e371f7f703228f912f2")]

// rule `project:List`(inj{List,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2b75eac5a59779d336e6cf9632bf9ba7d67286f322e753108b34e62f2443efe5), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortList{}, SortKItem{}}(VarK:SortList{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortList{},R} (
      Lblproject'Coln'List{}(X0:SortK{}),
     \and{SortList{}} (
       VarK:SortList{},
        \top{SortList{}}())))
  [UNIQUE'Unds'ID{}("2b75eac5a59779d336e6cf9632bf9ba7d67286f322e753108b34e62f2443efe5")]

// rule `project:Literal`(inj{Literal,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e4bac9a609f123cfe8dc840a7d5bd59306901c6b9dc69d9665dff550fc5aa24c), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortLiteral{}, SortKItem{}}(VarK:SortLiteral{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortLiteral{},R} (
      Lblproject'Coln'Literal{}(X0:SortK{}),
     \and{SortLiteral{}} (
       VarK:SortLiteral{},
        \top{SortLiteral{}}())))
  [UNIQUE'Unds'ID{}("e4bac9a609f123cfe8dc840a7d5bd59306901c6b9dc69d9665dff550fc5aa24c")]

// rule `project:Map`(inj{Map,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(031237d4aae58d86914d6370d37ccd15f4738378ed780333c59cc81b4f7bc598), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortMap{}, SortKItem{}}(VarK:SortMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortMap{},R} (
      Lblproject'Coln'Map{}(X0:SortK{}),
     \and{SortMap{}} (
       VarK:SortMap{},
        \top{SortMap{}}())))
  [UNIQUE'Unds'ID{}("031237d4aae58d86914d6370d37ccd15f4738378ed780333c59cc81b4f7bc598")]

// rule `project:Operation`(inj{Operation,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(802ded3ece7fe72e2aa03d40a02c134aa8959fb51babe2cb7b3c433e47a153f0), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOperation{}, SortKItem{}}(VarK:SortOperation{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortOperation{},R} (
      Lblproject'Coln'Operation{}(X0:SortK{}),
     \and{SortOperation{}} (
       VarK:SortOperation{},
        \top{SortOperation{}}())))
  [UNIQUE'Unds'ID{}("802ded3ece7fe72e2aa03d40a02c134aa8959fb51babe2cb7b3c433e47a153f0")]

// rule `project:Program`(inj{Program,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b21c80dd6e55cb4114a8287cdf76440e97a1136d9dedfe7a6f8aa0af36c194aa), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortProgram{}, SortKItem{}}(VarK:SortProgram{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortProgram{},R} (
      Lblproject'Coln'Program{}(X0:SortK{}),
     \and{SortProgram{}} (
       VarK:SortProgram{},
        \top{SortProgram{}}())))
  [UNIQUE'Unds'ID{}("b21c80dd6e55cb4114a8287cdf76440e97a1136d9dedfe7a6f8aa0af36c194aa")]

// rule `project:Sequence`(inj{Sequence,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(267c4b9f1a6b29d79fd1ad7726a131d8c8a9e9197f67c7f2dd5aa4e0c6d45871), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortSequence{}, SortKItem{}}(VarK:SortSequence{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortSequence{},R} (
      Lblproject'Coln'Sequence{}(X0:SortK{}),
     \and{SortSequence{}} (
       VarK:SortSequence{},
        \top{SortSequence{}}())))
  [UNIQUE'Unds'ID{}("267c4b9f1a6b29d79fd1ad7726a131d8c8a9e9197f67c7f2dd5aa4e0c6d45871")]

// rule `project:Set`(inj{Set,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0e7f5070c993161786e314f7199d985afebac9e07b5c784f6f623780c60ce9d0), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortSet{}, SortKItem{}}(VarK:SortSet{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortSet{},R} (
      Lblproject'Coln'Set{}(X0:SortK{}),
     \and{SortSet{}} (
       VarK:SortSet{},
        \top{SortSet{}}())))
  [UNIQUE'Unds'ID{}("0e7f5070c993161786e314f7199d985afebac9e07b5c784f6f623780c60ce9d0")]

// rule `project:StateCell`(inj{StateCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0573483956a8961d6c85cbcde0f7d23fd94a88f5f11c72a54f63e4975f3744aa), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStateCell{}, SortKItem{}}(VarK:SortStateCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStateCell{},R} (
      Lblproject'Coln'StateCell{}(X0:SortK{}),
     \and{SortStateCell{}} (
       VarK:SortStateCell{},
        \top{SortStateCell{}}())))
  [UNIQUE'Unds'ID{}("0573483956a8961d6c85cbcde0f7d23fd94a88f5f11c72a54f63e4975f3744aa")]

// rule `project:StateCellFragment`(inj{StateCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(071315163a6673caebca9803acd730c9d5ac2b00ab630c6e3f67f4e949654bc4), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStateCellFragment{}, SortKItem{}}(VarK:SortStateCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStateCellFragment{},R} (
      Lblproject'Coln'StateCellFragment{}(X0:SortK{}),
     \and{SortStateCellFragment{}} (
       VarK:SortStateCellFragment{},
        \top{SortStateCellFragment{}}())))
  [UNIQUE'Unds'ID{}("071315163a6673caebca9803acd730c9d5ac2b00ab630c6e3f67f4e949654bc4")]

// rule `project:StateCellOpt`(inj{StateCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e9c7307bada1aa928bd077216781fb45fe226c28e19ec950318b7cfa9e6ae9be), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStateCellOpt{}, SortKItem{}}(VarK:SortStateCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStateCellOpt{},R} (
      Lblproject'Coln'StateCellOpt{}(X0:SortK{}),
     \and{SortStateCellOpt{}} (
       VarK:SortStateCellOpt{},
        \top{SortStateCellOpt{}}())))
  [UNIQUE'Unds'ID{}("e9c7307bada1aa928bd077216781fb45fe226c28e19ec950318b7cfa9e6ae9be")]

// rule `project:TCell`(inj{TCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8f26b10396db28857112a7db56ab3ef6b64a5c219427baf3f17e0e1fb39ad1ba), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCell{}, SortKItem{}}(VarK:SortTCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTCell{},R} (
      Lblproject'Coln'TCell{}(X0:SortK{}),
     \and{SortTCell{}} (
       VarK:SortTCell{},
        \top{SortTCell{}}())))
  [UNIQUE'Unds'ID{}("8f26b10396db28857112a7db56ab3ef6b64a5c219427baf3f17e0e1fb39ad1ba")]

// rule `project:TCellFragment`(inj{TCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fcf28c9054cbb906b0631404e7190aa02f1fa3a4a09ec0d3024688ee1222c76c), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarK:SortTCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTCellFragment{},R} (
      Lblproject'Coln'TCellFragment{}(X0:SortK{}),
     \and{SortTCellFragment{}} (
       VarK:SortTCellFragment{},
        \top{SortTCellFragment{}}())))
  [UNIQUE'Unds'ID{}("fcf28c9054cbb906b0631404e7190aa02f1fa3a4a09ec0d3024688ee1222c76c")]

// rule `project:TCellOpt`(inj{TCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d3df5db294a6f5330dba88e63f8fdddee2bee164f110ca7e39e65afc4cfbb85a), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCellOpt{}, SortKItem{}}(VarK:SortTCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTCellOpt{},R} (
      Lblproject'Coln'TCellOpt{}(X0:SortK{}),
     \and{SortTCellOpt{}} (
       VarK:SortTCellOpt{},
        \top{SortTCellOpt{}}())))
  [UNIQUE'Unds'ID{}("d3df5db294a6f5330dba88e63f8fdddee2bee164f110ca7e39e65afc4cfbb85a")]

// rule `project:Transition`(inj{Transition,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(afa86774b6cb3955b1b80d12fa6333723df66bfa1d9520ac06dc74cb34b4760d), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTransition{}, SortKItem{}}(VarK:SortTransition{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTransition{},R} (
      Lblproject'Coln'Transition{}(X0:SortK{}),
     \and{SortTransition{}} (
       VarK:SortTransition{},
        \top{SortTransition{}}())))
  [UNIQUE'Unds'ID{}("afa86774b6cb3955b1b80d12fa6333723df66bfa1d9520ac06dc74cb34b4760d")]

// rule `project:TransitionsCell`(inj{TransitionsCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(ab5ecb4ffa7b438b35734dc0fbf7bb00fa603e75da29a1aa5a70873bdf5680b1), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTransitionsCell{}, SortKItem{}}(VarK:SortTransitionsCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTransitionsCell{},R} (
      Lblproject'Coln'TransitionsCell{}(X0:SortK{}),
     \and{SortTransitionsCell{}} (
       VarK:SortTransitionsCell{},
        \top{SortTransitionsCell{}}())))
  [UNIQUE'Unds'ID{}("ab5ecb4ffa7b438b35734dc0fbf7bb00fa603e75da29a1aa5a70873bdf5680b1")]

// rule `project:TransitionsCellOpt`(inj{TransitionsCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3be2edd1f0f2d9f3028094ba83ea7efacd9b229a1725bb09b064a5f500142cff), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTransitionsCellOpt{}, SortKItem{}}(VarK:SortTransitionsCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTransitionsCellOpt{},R} (
      Lblproject'Coln'TransitionsCellOpt{}(X0:SortK{}),
     \and{SortTransitionsCellOpt{}} (
       VarK:SortTransitionsCellOpt{},
        \top{SortTransitionsCellOpt{}}())))
  [UNIQUE'Unds'ID{}("3be2edd1f0f2d9f3028094ba83ea7efacd9b229a1725bb09b064a5f500142cff")]

// rule `project:VariableDeclaration`(inj{VariableDeclaration,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0441211cd8dfea0c7df78195fc308e5015e7e7cd95e02a3c42f520cd124a8caa), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortVariableDeclaration{}, SortKItem{}}(VarK:SortVariableDeclaration{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortVariableDeclaration{},R} (
      Lblproject'Coln'VariableDeclaration{}(X0:SortK{}),
     \and{SortVariableDeclaration{}} (
       VarK:SortVariableDeclaration{},
        \top{SortVariableDeclaration{}}())))
  [UNIQUE'Unds'ID{}("0441211cd8dfea0c7df78195fc308e5015e7e7cd95e02a3c42f520cd124a8caa")]

// rule `project:VariablesCell`(inj{VariablesCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c22186b5f09117a298d9df8335b091ddedd878b2ffd4d3c82d24b41a6bd0439a), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortVariablesCell{}, SortKItem{}}(VarK:SortVariablesCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortVariablesCell{},R} (
      Lblproject'Coln'VariablesCell{}(X0:SortK{}),
     \and{SortVariablesCell{}} (
       VarK:SortVariablesCell{},
        \top{SortVariablesCell{}}())))
  [UNIQUE'Unds'ID{}("c22186b5f09117a298d9df8335b091ddedd878b2ffd4d3c82d24b41a6bd0439a")]

// rule `project:VariablesCellOpt`(inj{VariablesCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(59f1730576484a273ad3ca171ff51ab446dfa85ae9191102e5e3ecb2b56d2174), projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortVariablesCellOpt{}, SortKItem{}}(VarK:SortVariablesCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortVariablesCellOpt{},R} (
      Lblproject'Coln'VariablesCellOpt{}(X0:SortK{}),
     \and{SortVariablesCellOpt{}} (
       VarK:SortVariablesCellOpt{},
        \top{SortVariablesCellOpt{}}())))
  [UNIQUE'Unds'ID{}("59f1730576484a273ad3ca171ff51ab446dfa85ae9191102e5e3ecb2b56d2174")]

// rule pushList(K,L1)=>`_List_`(`ListItem`(K),L1) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f6967050cc4ec32c2d34d52f5577e09120f730420d2c5dc838cba81d04c57adf), org.kframework.attributes.Location(Location(954,8,954,54)), org.kframework.attributes.Source(Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [symbol(#ruleNoConditions)])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortKItem{}, R} (
            X0:SortKItem{},
            VarK:SortKItem{}
          ),\and{R} (
          \in{SortList{}, R} (
            X1:SortList{},
            VarL1:SortList{}
          ),
          \top{R} ()
        ))),
    \equals{SortList{},R} (
      LblpushList{}(X0:SortKItem{},X1:SortList{}),
     \and{SortList{}} (
       Lbl'Unds'List'Unds'{}(LblListItem{}(VarK:SortKItem{}),VarL1:SortList{}),
        \top{SortList{}}())))
  [UNIQUE'Unds'ID{}("f6967050cc4ec32c2d34d52f5577e09120f730420d2c5dc838cba81d04c57adf"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(954,8,954,54)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/nix/store/9bclvn43gf6hrr75hxjw35icz36pcjaa-k-7.1.212-51bd676326a0dbfbce7c64e41247b7126b639177/include/kframework/builtin/domains.md)")]

endmodule [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,1,55,10)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/mnt/e/bme/dev/onlab/k/project/xsts.k)")]
